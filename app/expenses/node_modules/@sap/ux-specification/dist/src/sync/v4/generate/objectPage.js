"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../specification/common");
const v4_1 = require("../../../v4");
const StableIdHelper_1 = require("../utils/StableIdHelper");
const common_2 = require("../../common");
const utils_1 = require("../utils/utils");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Adds a filed definition to the app specific schema
 * @param {string} sectionType - prefix to distinguish Section and HeaderSection
 * @param {object} appSchema - App schema in general
 * @param {DataFieldAbstractTypes} field - field definition in parser output (AVT)
 * @param {string} targetID - unique ID, identifies the parent object (form)
 * @param {string} key - current field key
 * @param {SectionType} section - current section of the object page
 */
function addField(sectionType, appSchema, field, targetID, key, section) {
    var _a, _b, _c, _d;
    const fieldReference = StableIdHelper_1.getStableIdPartFromDataField(field);
    const fieldDefinition = `${targetID}::${fieldReference}`;
    const fieldsDefinition = `${sectionType}Fields<${targetID}>`;
    const actionsDefinition = `${sectionType}Actions<${targetID}>`;
    if (!field || !field.$Type) {
        return; // ToDo: Actions to be interpreted as Header or Footer Actions
    }
    else if (field.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction' ||
        field.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation') {
        if (sectionType === v4_1.SectionType.Section) {
            appSchema['definitions'][actionsDefinition]['properties'][fieldReference] = {
                $ref: common_2.DEFINITION_LINK_PREFIX + fieldDefinition,
                propertyIndex: parseInt(key)
            };
        }
    }
    else {
        appSchema['definitions'][fieldsDefinition]['properties'][fieldReference] = {
            $ref: common_2.DEFINITION_LINK_PREFIX + fieldDefinition,
            propertyIndex: parseInt(key)
        };
    }
    appSchema['definitions'][fieldDefinition] = {
        type: 'object',
        isViewNode: true,
        properties: {},
        description: common_2.getDatafieldDescription(field, section.entityType),
        additionalProperties: false
    };
    if ((_b = (_a = field['Value']) === null || _a === void 0 ? void 0 : _a.$target) === null || _b === void 0 ? void 0 : _b.type) {
        appSchema['definitions'][fieldDefinition].dataType = (_d = (_c = field['Value']) === null || _c === void 0 ? void 0 : _c.$target) === null || _d === void 0 ? void 0 : _d.type;
    }
    appSchema['definitions'][fieldDefinition].annotationPath = `/${section.entityType.fullyQualifiedName}/${field.fullyQualifiedName.split(section.entityType.fullyQualifiedName)[1]}`;
}
/**
 * Adds definitions for forms in object page sections to the app schema
 * @param {SectionType} sectionType - prefix to distinguish Section and HeaderSection
 * @param {FacetConfig} section - facet or section in the FE core model
 * @param {object} appSchemaSection - current definition of facet or section in the JSON schema
 * @param {object} appSchema - app specific schema that gets enhanced
 */
function handleForm(sectionType, section, appSchemaSection, appSchema) {
    if (!section.target) {
        return;
    }
    const targetID = section.target && section.target['qualifier'] && section.entityType
        ? section.entityType['name'] + '::' + section.target['qualifier']
        : section.entityType
            ? section.entityType.name
            : section.ID;
    const formDefinition = `${sectionType}Form<${targetID}>`;
    const fieldsDefinition = `${sectionType}Fields<${targetID}>`;
    const actionsDefinition = `${sectionType}Actions<${targetID}>`;
    // Form definition
    appSchemaSection['properties']['form'] = {
        $ref: common_2.DEFINITION_LINK_PREFIX + formDefinition
    };
    if (sectionType === v4_1.SectionType.Section) {
        appSchema['definitions'][formDefinition] = {
            type: 'object',
            properties: {
                actions: {
                    $ref: common_2.DEFINITION_LINK_PREFIX + actionsDefinition
                },
                fields: { $ref: common_2.DEFINITION_LINK_PREFIX + fieldsDefinition }
            },
            isViewNode: true,
            description: 'Form',
            additionalProperties: false
        };
        appSchema['definitions'][actionsDefinition] = {
            type: 'object',
            properties: {},
            isViewNode: true,
            description: 'Actions',
            additionalProperties: false
        };
    }
    else {
        appSchema['definitions'][formDefinition] = {
            type: 'object',
            properties: {
                fields: { $ref: common_2.DEFINITION_LINK_PREFIX + fieldsDefinition }
            },
            isViewNode: true,
            description: 'Form',
            additionalProperties: false
        };
    }
    if (section.entityType && section.entityType.name) {
        appSchema['definitions'][formDefinition].annotationPath = common_2.createAnnotationPath(section.entityType.fullyQualifiedName, section.target['term'], section.target['qualifier']);
    }
    // Fields definition
    appSchema['definitions'][fieldsDefinition] = {
        type: 'object',
        properties: {},
        isViewNode: true,
        description: 'Fields',
        additionalProperties: false
    };
    // Add fields
    if (section.base === 'Identification') {
        for (const key in section.target) {
            const field = section.target[key];
            if (field) {
                addField(sectionType, appSchema, field, targetID, key, section);
            }
        }
    }
    else {
        for (const key in section.target['Data']) {
            const field = section.target['Data'][key];
            addField(sectionType, appSchema, field, targetID, key, section);
        }
    }
}
/**
 * Adds definitions for line items in object page sections to the app schema
 * @param facetId - key of the facet, as listed in FacetConfigs
 * @param appSchema - app schema in general
 * @param facet - the given facet from the UI annotations
 * @param facets - list of all facets
 */
function handleLineItem(facetId, appSchema, facet, facets, oDataServiceAVT) {
    let navigationProperty = '', annotation = '';
    [navigationProperty, annotation] = facetId.split('::');
    const schemaIdForOpSection = 'ObjectPageSectionTableV4<' + facetId + '>';
    appSchema['definitions'][schemaIdForOpSection] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageSectionTableV4']));
    const schemaIdForTable = `ObjectPageTable<${facetId}>`;
    appSchema['definitions'][schemaIdForOpSection].properties.table.$ref = `${common_2.DEFINITION_LINK_PREFIX}${schemaIdForTable}`;
    appSchema['definitions'][schemaIdForTable] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageTable']));
    appSchema['definitions'][schemaIdForOpSection].annotationPath = facet.annotationPath;
    if (facet.ID !== undefined) {
        appSchema['definitions'][schemaIdForOpSection].title = common_2.FacetTitlePrefix + facet.ID;
    }
    if (facet.Label) {
        appSchema['definitions'][schemaIdForOpSection].description = facet.Label;
    }
    appSchema['definitions'][schemaIdForOpSection].properties.table.$ref =
        common_2.DEFINITION_LINK_PREFIX + 'ObjectPageTable<' + facetId + '>';
    const idForTable = 'ObjectPageTable<' + facetId + '>';
    appSchema['definitions'][idForTable] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageTable']));
    if (facet.entityType && annotation) {
        appSchema['definitions'][idForTable].annotationPath = `/${facet.entityType.fullyQualifiedName}/${annotation}`;
    }
    appSchema['definitions'][idForTable].properties['columns'] = {
        $ref: common_2.DEFINITION_LINK_PREFIX + facetId
    };
    appSchema['definitions'][idForTable].properties['toolBar'].$ref = `${common_2.DEFINITION_LINK_PREFIX}ObjectPageToolBar<${facetId}>`;
    for (const facetKey in facets) {
        if (facets[facetKey].base === 'LineItem' && facetKey.includes(navigationProperty)) {
            utils_1.addLineItemsType(appSchema, facets[facetKey]['lineItem'], facets[facetKey]['entityType'], oDataServiceAVT, 'ObjectPageTableColumn', facetId);
        }
    }
}
/**
 * Creates a section definition in app schema.
 * @param {FacetConfigs} facets - list of all facets.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 */
function addSection(facets, facetKey, sections, appSchema, oDataServiceAVT, sectionPrefix) {
    const facet = facets[facetKey];
    if (facet.base === 'CollectionFacet') {
        //handle collection facets
        sections['properties'][facetKey] = common_2.createSectionWithoutProperties(facet);
        sections['properties'][facetKey].properties = {
            subsections: {
                additionalProperties: false,
                type: 'object',
                properties: {},
                annotationPath: facet.annotationPath,
                isViewNode: true,
                description: 'Subsections'
            }
        };
        const subSections = sections['properties'][facetKey].properties.subsections;
        for (const key in facet['facets']) {
            addSection(facet['facets'], key, subSections, appSchema, oDataServiceAVT, sectionPrefix);
        }
    }
    else if (facet.base === 'LineItem' && sectionPrefix === v4_1.SectionType.Section) {
        //handle reference facet (if comprising line item)
        sections['properties'][facetKey] = {
            $ref: `${common_2.DEFINITION_LINK_PREFIX}ObjectPage${sectionPrefix}TableV4<${facetKey}>`
        };
        handleLineItem(facetKey, appSchema, facet, facets, oDataServiceAVT);
    }
    else if (facet.base === common_2.FacetBase.Form || facet.base === common_2.FacetBase.Identification) {
        const formDefinitionKey = `ObjectPage${sectionPrefix}Form<${facetKey}>`;
        sections['properties'][facetKey] = {
            $ref: `${common_2.DEFINITION_LINK_PREFIX}${formDefinitionKey}`
        };
        appSchema['definitions'][formDefinitionKey] = JSON.parse(JSON.stringify(appSchema['definitions'][`ObjectPage${sectionPrefix}Form`]));
        if (facet === null || facet === void 0 ? void 0 : facet.ID) {
            appSchema['definitions'][formDefinitionKey]['title'] = common_2.FacetTitlePrefix + facet.ID;
        }
        if (facet === null || facet === void 0 ? void 0 : facet.Label) {
            appSchema['definitions'][formDefinitionKey]['description'] = facet.Label;
        }
        appSchema['definitions'][formDefinitionKey]['annotationPath'] = facet.annotationPath;
        appSchema['definitions'][formDefinitionKey]['isViewNode'] = true;
        if (!appSchema['definitions'][formDefinitionKey].description) {
            if (facet.base === common_2.FacetBase.Form) {
                appSchema['definitions'][formDefinitionKey].description = 'Form';
            }
            else if (facet.base === 'Identification') {
                appSchema['definitions'][formDefinitionKey].description = 'Identification';
            }
        }
        handleForm(sectionPrefix, facet, appSchema['definitions'][formDefinitionKey], appSchema);
    }
    else if (facet.base === common_2.FacetBase.DataPoint ||
        facet.base === common_2.FacetBase.Address ||
        facet.base === common_2.FacetBase.Contact) {
        const facetDefinitionKey = `ObjectPage${sectionPrefix}${facet.base}<${facetKey}>`;
        sections['properties'][facetKey] = {
            $ref: `${common_2.DEFINITION_LINK_PREFIX}${facetDefinitionKey}`
        };
        appSchema['definitions'][facetDefinitionKey] = JSON.parse(JSON.stringify(appSchema['definitions'][`ObjectPage${sectionPrefix}${facet.base}`]));
        if (facet === null || facet === void 0 ? void 0 : facet.ID) {
            appSchema['definitions'][facetDefinitionKey]['title'] = common_2.FacetTitlePrefix + facet.ID;
        }
        if (facet === null || facet === void 0 ? void 0 : facet.Label) {
            appSchema['definitions'][facetDefinitionKey]['description'] = facet.Label;
        }
        appSchema['definitions'][facetDefinitionKey]['annotationPath'] = facet.annotationPath;
        appSchema['definitions'][facetDefinitionKey]['isViewNode'] = true;
    }
    else {
        sections['properties'][facetKey] = common_2.createSectionWithoutProperties(facet);
    }
}
/**
 * Derives the sections from the UI.Facets annotation and adds them to the schema
 * @param {object} appSchema - application specific JSON schema
 * @param {string} entityTypeName - current entity type
 * @param pages {SapUiAppPageV4[]} - list of (manifest) pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function addSections(appSchema, entityType, entitySetName, pages, oDataServiceAVT, logger) {
    // Get facet annotations
    const facets = common_2.getObjectPageFacets(entityType, oDataServiceAVT, common_1.FioriElementsVersion.v4, logger);
    if (!facets) {
        delete appSchema['definitions']['ObjectPageSubSections'];
        return;
    }
    const sections = appSchema['definitions']['Sections'];
    Object.keys(pages).forEach((element) => {
        var _a, _b;
        if (((_b = (_a = pages[element].options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.entitySet) === entitySetName &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            for (const facetKey in facets) {
                addSection(facets, facetKey, sections, appSchema, oDataServiceAVT, v4_1.SectionType.Section);
            }
        }
    });
    // Custom sections as part of sections
    if (appSchema['definitions']['CustomSections']) {
        sections.properties = Object.assign(Object.assign({}, sections.properties), appSchema['definitions']['CustomSections'].properties);
    }
}
/**
 * Derives the header sections from the UI.HeaderFacets annotation and adds them to the schema
 * @param {object} appSchema - application specific JSON schema
 * @param {string} entityTypeName - current entity type
 * @param pages {SapUiAppPageV4[]} - list of (manifest) pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function addHeaderSections(appSchema, entityType, entitySetName, pages, oDataServiceAVT, logger) {
    // Get facet annotations
    const facets = common_2.getObjectPageHeaderFacets(entityType, oDataServiceAVT, common_1.FioriElementsVersion.v4, logger);
    const sections = appSchema['definitions']['HeaderSections'];
    sections.properties = {};
    sections.additionalProperties = false;
    if (!facets) {
        return;
    }
    Object.keys(pages).forEach((element) => {
        var _a, _b;
        if (((_b = (_a = pages[element].options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.entitySet) === entitySetName &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            for (const facetKey in facets) {
                addSection(facets, facetKey, sections, appSchema, oDataServiceAVT, v4_1.SectionType.HeaderSection);
            }
        }
    });
    // Custom sections as part of sections - still open if can be added the same way
    /*if (appSchema['definitions']['CustomSections']) {
        sections.properties = { ...sections.properties, ...appSchema['definitions']['CustomSections'].properties };
    }*/
    //delete generic definitions
    delete appSchema['definitions']['ObjectPageHeaderSectionForm'];
    delete appSchema['definitions']['ObjectPageHeaderSectionChart'];
    delete appSchema['definitions']['ObjectPageHeaderSectionDataPoint'];
    delete appSchema['definitions']['ObjectPageHeaderSectionContact'];
    delete appSchema['definitions']['ObjectPageHeaderSectionAddress'];
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param {object} schema - app specific schema that potentially gets enhanced
 * @param {EntityType} entityType - current entity type
 * @param {string} entitySetName - entity set of the actual (object) page
 * @param {SapUiAppPageV4[]} pages - list of all pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addRelatedFacetKeysType(schema, entityType, entitySetName, pages, oDataServiceAVT, logger) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            pages[element].options.settings.entitySet === entitySetName &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            // Find sections from annotation
            const facetSections = common_2.getObjectPageFacetSection(entityType, oDataServiceAVT, logger);
            // Find custom sections ids from manifest
            const page = pages[element];
            if (page.options &&
                page.options.settings &&
                page.options.settings.content &&
                page.options.settings.content.body &&
                page.options.settings.content.body.sections) {
                Object.keys(page.options.settings.content.body.sections).forEach(function (key) {
                    // Just in case - avoid duplications
                    if (!facetSections.find((section) => section.key === key)) {
                        facetSections.push({
                            key,
                            custom: true
                        });
                    }
                });
            }
            // Update schema definition
            common_2.addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment'], facetSections, [
                'ID',
                'label',
                'key'
            ]);
        }
    });
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param genericSchema  - generic JSON schema of an object page
 * @param entityTypeName - the base entity type of the given page
 * @param {ConverterOutput} oDataServiceAVT  - complete service information, as returned by annotation vocabularies tool
 * @param manifest - manifest.json of the app
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV4(genericSchema, entityTypeName, oDataServiceAVT, manifest, logger) {
    var _a, _b, _c, _d;
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Eliminate generic definitions
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSubSections'];
    // Change reference to generated sections
    appSchema['properties']['sections'] = {
        $ref: common_2.DEFINITION_LINK_PREFIX + 'Sections'
    };
    const entitySet = oDataServiceAVT === null || oDataServiceAVT === void 0 ? void 0 : oDataServiceAVT.entitySets.find((es) => es.entityType.name === entityTypeName);
    if (!entitySet) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET4NAME', { entityType: entityTypeName }),
            location: {
                path: common_2.METADATAPATH
            }
        });
    }
    const entityType = entitySet === null || entitySet === void 0 ? void 0 : entitySet.entityType;
    if (!manifest[common_1.ManifestSection.ui5].routing || !manifest[common_1.ManifestSection.ui5].routing.targets) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: v4_1.MANIFESTPATH
            }
        });
    }
    //initialize sections
    appSchema['definitions']['Sections'] = {
        type: 'object',
        properties: {},
        additionalProperties: false,
        isViewNode: true,
        description: 'Sections'
    };
    if (entitySet) {
        // Add header sections
        appSchema['definitions']['HeaderSections']['annotationPath'] = `/${entitySet.entityType.fullyQualifiedName}/@com.sap.vocabularies.UI.v1.HeaderFacets`;
        addHeaderSections(appSchema, entityType, entitySet.name, (_b = (_a = manifest[common_1.ManifestSection.ui5]) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets, oDataServiceAVT, logger);
        // Add sections
        appSchema['definitions']['Sections']['annotationPath'] = `/${entitySet.entityType.fullyQualifiedName}/@com.sap.vocabularies.UI.v1.Facets`;
        addSections(appSchema, entityType, entitySet.name, (_d = (_c = manifest[common_1.ManifestSection.ui5]) === null || _c === void 0 ? void 0 : _c.routing) === null || _d === void 0 ? void 0 : _d.targets, oDataServiceAVT, logger);
        // Custom Section facets
        addRelatedFacetKeysType(appSchema, entityType, entitySet.name, manifest[common_1.ManifestSection.ui5].routing.targets, oDataServiceAVT, logger);
    }
    // delete generic definitions from schema
    delete appSchema['definitions']['ObjectPageTable'];
    delete appSchema['definitions']['GenericColumns'];
    delete appSchema['definitions']['ObjectPageSectionTableV4'];
    delete appSchema['definitions']['ObjectPageSectionForm'];
    delete appSchema['definitions']['ObjectPageSectionDataPoint'];
    delete appSchema['definitions']['ObjectPageSectionAddress'];
    delete appSchema['definitions']['ObjectPageSectionContact'];
    delete appSchema['definitions']['ObjectPageToolBar'];
    delete appSchema['definitions']['ObjectPageToolBarActions'];
    delete appSchema['definitions']['ObjectPageToolBarAction'];
    return appSchema;
}
exports.generateObjectPageSchemaV4 = generateObjectPageSchemaV4;
//# sourceMappingURL=objectPage.js.map