"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const utils_1 = require("./utils");
const import_1 = require("../import");
const v2_1 = require("../../../v2");
const common_2 = require("../../../specification/common");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../i18n/i18n");
/**
 * Method ensures that definitions for custom columns are created for passed entitySet.
 * @param {object} appSchema App schema in general
 * @param {object} manifest manifest.json of the app
 * @param {string} entitySetName Entity set name.
 * @param {string} entityTypeName Entity type name.
 * @param {ConverterOutput} oDataServiceAVT Complete service information, as returned by annotation vocabularies tool
 * @param {FileData[]} [fragments] Array with XML fragments.
 * @return {string} Name of custom columns definition.
 */
function ensureCustomColumnDefinitionExists(appSchema, manifest, entitySetName, entityTypeName, oDataServiceAVT, fragments) {
    const customColumnsDefinitionName = `${utils_1.CUSTOM_COLUMNS_DEFINITION}<${entitySetName}>`;
    if (appSchema['definitions'][customColumnsDefinitionName]) {
        // Definition is already created - we do not need to create it again
        return utils_1.CUSTOM_COLUMNS_DEFINITION;
    }
    // Create type specific 'TableCustomColumn' definition - use entity set as type.
    const customColumnDefinitionName = `${utils_1.CUSTOM_COLUMN_DEFINITION}<${entitySetName}>`;
    const customColumnDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['TableCustomColumn']));
    appSchema['definitions'][customColumnDefinitionName] = customColumnDefinition;
    // Update definitions for type specific custom columns
    const pageKeys = [];
    const entityType = oDataServiceAVT.entityTypes.find((et) => et.name === entityTypeName);
    const v2Page = import_1.findObjectPage(manifest[common_2.ManifestSection.generic].pages, entitySetName, pageKeys);
    utils_1.addListReportColumnExtensions(appSchema, entityType, v2Page, manifest, fragments, customColumnsDefinitionName, customColumnDefinitionName);
    return customColumnsDefinitionName;
}
/**
 * Reuse function for all table types, copies and adapts the generic definition
 * @param tableType - Table type
 * @param facetId - facet ID, as derived for the given section
 * @param facet - facet or section information
 * @param appSchema - app-specific schema, to be updated
 */
function addTableDefinition(tableType, facetId, facet, appSchema) {
    const schemaId = `${tableType}<${facetId}>`;
    appSchema['definitions'][schemaId] = JSON.parse(JSON.stringify(appSchema['definitions'][tableType]));
    appSchema['definitions'][schemaId]['properties']['columns']['$ref'] = common_1.DEFINITION_LINK_PREFIX + facetId;
    appSchema['definitions'][schemaId].properties.toolBar.$ref = `${common_1.DEFINITION_LINK_PREFIX}ObjectPageToolBar<${facetId}>`;
    appSchema['definitions'][schemaId].annotationPath = facet.annotationPath;
    if (facet.ID !== undefined) {
        appSchema['definitions'][schemaId].title = common_1.FacetTitlePrefix + facet.ID;
    }
    if (facet.Label) {
        appSchema['definitions'][schemaId].description = facet.Label;
    }
}
/**
 * Adds definitions for line items in object page sections to the app schema
 * @param {string} facetId - key of the facet, as listed in FacetConfigs
 * @param {object} appSchema - app schema in general
 * @param {FacetConfig} facet - the given facet from the UI annotations
 * @param {FacetConfigs} facets - list of all facets
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {object} manifest - manifest.json of the app
 * @param {FileData[]} [fragments] - array with XML fragments.
 */
function handleLineItem(facetId, appSchema, facet, facets, oDataServiceAVT, manifest, fragments) {
    if (facet.base !== 'LineItem' || !facetId) {
        //no properties
        return;
    }
    const navigationProperty = facetId.split('::')[0];
    const schemaIdForOpSection = 'ObjectPageSectionTableV2<' + facetId + '>';
    appSchema['definitions'][schemaIdForOpSection] = {
        type: 'object',
        properties: {
            table: {
                anyOf: [
                    {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageResponsiveTableWithMultiSelect<' + facetId + '>'
                    },
                    {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageResponsiveTableWithInlineDelete<' + facetId + '>'
                    },
                    {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageAnalyticalTable<' + facetId + '>'
                    },
                    {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageGridTable<' + facetId + '>'
                    },
                    {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageTreeTable<' + facetId + '>'
                    }
                ]
            }
        },
        additionalProperties: false,
        annotationPath: facet.annotationPath
    };
    if (facet.ID) {
        appSchema['definitions'][schemaIdForOpSection].title = common_1.FacetTitlePrefix + facet.ID;
    }
    if (facet.Label) {
        appSchema['definitions'][schemaIdForOpSection].description = facet.Label;
    }
    // Find target entity
    const targetEntity = facet.entityType
        ? oDataServiceAVT.entitySets.find((es) => es.entityType.name === facet.entityType.name || es.name === facet.entityType.name)
        : undefined;
    addTableDefinition('ObjectPageResponsiveTableWithMultiSelect', facetId, facet, appSchema);
    addTableDefinition('ObjectPageResponsiveTableWithInlineDelete', facetId, facet, appSchema);
    addTableDefinition('ObjectPageGridTable', facetId, facet, appSchema);
    addTableDefinition('ObjectPageTreeTable', facetId, facet, appSchema);
    addTableDefinition('ObjectPageAnalyticalTable', facetId, facet, appSchema);
    let customColumnDefinitionKey;
    if (targetEntity) {
        // Make sure that custom columns definitions are created for passed entity
        customColumnDefinitionKey = ensureCustomColumnDefinitionExists(appSchema, manifest, targetEntity.name, facet.entityType.name, oDataServiceAVT, fragments);
    }
    for (const facetKey in facets) {
        if (facets[facetKey].base === 'LineItem' && facetKey.includes(navigationProperty)) {
            utils_1.addLineItemsType(appSchema, facets[facetKey]['lineItem'], facets[facetKey]['entityType'], facetId, customColumnDefinitionKey);
        }
    }
}
/**
 * Creates a section definition in app schema.
 * @param {FacetConfigs} facets - list of all facets.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {object} manifest - manifest.json of the app.
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool.
 * @param {FileData[]} [fragments] - array with XML fragments.
 */
function addSection(facets, facetKey, sections, appSchema, manifest, oDataServiceAVT, fragments) {
    const facet = facets[facetKey];
    if (facet.base === 'CollectionFacet') {
        //handle collection facets
        const schemaIdForSection = facetKey.replace('@com.sap.vocabularies.UI.v1.Facets', facet.base);
        sections['properties'][schemaIdForSection] = common_1.createSectionWithoutProperties(facet);
        const collectionDefinition = 'ObjectPageSectionTableV2<' + schemaIdForSection + '>';
        sections['properties'][schemaIdForSection].properties = {
            subsections: {
                $ref: common_1.DEFINITION_LINK_PREFIX + collectionDefinition
            }
        };
        appSchema['definitions'][collectionDefinition] = common_1.createSectionWithoutProperties(facet);
        appSchema['definitions'][collectionDefinition].description = 'Subsections';
        for (const key in facet['facets']) {
            addSection(facet['facets'], key, appSchema['definitions'][collectionDefinition], appSchema, manifest, oDataServiceAVT, fragments);
        }
    }
    else if (facet.base === 'LineItem') {
        //handle reference facet (if comprising line item)
        sections['properties'][facetKey] = {
            $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageSectionTableV2<' + facetKey + '>'
        };
        handleLineItem(facetKey, appSchema, facet, facets, oDataServiceAVT, manifest, fragments);
        //add fields for createWithParameterDialog
        common_1.addFieldsType(appSchema, facet.entityType);
    }
    else if (facet.base === 'Chart') {
        //handle reference facet (if comprising chart)
        const chartSettings = appSchema['definitions']['GenericSections']['additionalProperties']['anyOf'].find((element) => element['$ref'] === common_1.DEFINITION_LINK_PREFIX + 'ObjectPageSectionChartV2');
        sections['properties'][facetKey] = chartSettings;
        if (facet.ID !== undefined) {
            appSchema['definitions']['ObjectPageSectionChartV2'].title = common_1.FacetTitlePrefix + facet.ID;
            if (facet.Label) {
                appSchema['definitions']['ObjectPageSectionChartV2'].description = facet.Label;
            }
        }
    }
    else {
        // Other facets -> no properties
        sections['properties'][facetKey] = common_1.createSectionWithoutProperties(facet);
    }
}
/**
 * Adds the sections to the app schema
 * @param {object} appSchema - app specific schema that potentially gets enhanced
 * @param {EntityType} entityType - current entity type
 * @param {SapUiAppPagesV2} pages - list of (manifest) pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function addSections(appSchema, entityType, entitySetName, pages, oDataServiceAVT, manifest, fragments, logger) {
    //initialize sections
    const sections = (appSchema['definitions']['Sections'] = {
        type: 'object',
        properties: {},
        description: 'Sections',
        additionalProperties: false,
        isViewNode: true
    });
    if (entityType) {
        sections['annotationPath'] = `/${entityType.fullyQualifiedName}/@com.sap.vocabularies.UI.v1.Facets`;
    }
    if (!pages) {
        return;
    }
    // Get facet annotations
    const facets = common_1.getObjectPageFacets(entityType, oDataServiceAVT, common_2.FioriElementsVersion.v2, logger);
    if (!facets || Object.keys(facets).length === 0) {
        return;
    }
    // Loop on all pages, look for the right entity set
    for (const key in pages) {
        const element = pages[key];
        if (entitySetName.includes(element.entitySet)) {
            // Loop on all facets (of the given entitySet)
            for (const facetKey in facets) {
                addSection(facets, facetKey, sections, appSchema, manifest, oDataServiceAVT, fragments);
            }
        }
        else {
            addSections(appSchema, entityType, entitySetName, element.pages, oDataServiceAVT, manifest, fragments);
        }
    }
    // Add custom sections
    for (const name in appSchema['definitions']['CustomSections'].properties) {
        sections.properties[name] = appSchema['definitions']['CustomSections'].properties[name];
    }
}
/**
 * Add Object Page Header Action Buttons to app-specific schema
 *
 * @param {object} appSchema Schema of the app
 * @param {EntityType} entityType - current entity type
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addHeaderActions(appSchema, entityType, oDataServiceAVT) {
    appSchema['definitions']['ObjectPageHeader'] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageHeader<GenericActions>']));
    delete appSchema['definitions']['ObjectPageHeader']['properties']['actions'];
    const alias = common_1.findAlias('com.sap.vocabularies.UI.v1', oDataServiceAVT);
    const actionAnnotation = alias &&
        entityType.annotations &&
        entityType.annotations[alias] &&
        entityType.annotations[alias].Identification;
    if (actionAnnotation) {
        // Add action to configuration
        appSchema['definitions']['ObjectPageHeader'].properties['actions'] = {
            $ref: common_1.DEFINITION_LINK_PREFIX + 'HeaderActions'
        };
        const headerActions = (appSchema['definitions']['HeaderActions'] = {
            type: 'object',
            properties: {},
            description: 'Actions',
            additionalProperties: false,
            isViewNode: true
        });
        actionAnnotation.forEach((item) => {
            if (!item['Determining'] && item.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction') {
                const actionName = item.Action.split('.')[1].split('/');
                const entityNameSpace = entityType.fullyQualifiedName.split('.')[0];
                const actionId = entityNameSpace + '.' + actionName[0] + '::' + actionName[1];
                headerActions.properties[actionId] = {
                    $ref: common_1.DEFINITION_LINK_PREFIX + 'HeaderAction'
                };
                const description = item.Label || actionName[1];
                headerActions.properties[actionId]['description'] = description;
            }
        });
    }
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param schema - app specific schema that potentially gets enhanced
 * @param {EntityType} entityType - current entity type
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function addRelatedFacetKeysType(schema, entityType, oDataServiceAVT, logger) {
    // Find sections from annotation
    // And create new definition in schema as enum with description
    const facetSections = common_1.getObjectPageFacetSection(entityType, oDataServiceAVT, logger, undefined, true);
    if (facetSections) {
        common_1.addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment', 'ObjectPageCustomSectionView'], facetSections, ['ID', 'key']);
    }
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entityTypeName - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param manifest - manifest.json of the app
 * @param {FileData[]} [fragments] - array with XML fragments.
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV2(genericSchema, entityTypeName, oDataServiceAVT, manifest, fragments, logger) {
    // Initialize i18next
    i18n_1.initI18n();
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Custom sections as part of sections
    const additionalSections = {};
    for (const name in appSchema['definitions']['CustomSections'].properties) {
        additionalSections[name] = appSchema['definitions']['CustomSections'].properties[name];
    }
    // Change reference to generated sections
    appSchema['properties']['sections'] = {
        $ref: common_1.DEFINITION_LINK_PREFIX + 'Sections'
    };
    // Change reference to header actions
    appSchema['properties']['header'] = {
        $ref: common_1.DEFINITION_LINK_PREFIX + 'ObjectPageHeader'
    };
    const entitySet = oDataServiceAVT.entitySets &&
        oDataServiceAVT.entitySets.find((es) => es.entityType.name === entityTypeName || es.name === entityTypeName);
    if (!entitySet) {
        v2_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET4NAME', { entityType: entityTypeName }),
            location: {
                path: common_1.METADATAPATH
            }
        });
        return;
    }
    const entityType = entitySet === null || entitySet === void 0 ? void 0 : entitySet.entityType;
    // Add sections
    addSections(appSchema, entityType, entitySet.name, manifest[common_2.ManifestSection.generic].pages, oDataServiceAVT, manifest, fragments, logger);
    // Add header actions
    addHeaderActions(appSchema, entityType, oDataServiceAVT);
    delete appSchema['definitions']['GenericActions'];
    delete appSchema['definitions']['ObjectPageHeader<GenericActions>'];
    // Custom section facets
    addRelatedFacetKeysType(appSchema, entityType, oDataServiceAVT, logger);
    // Remove Custom Column non existing extensions - TreeTableColumnsExtension does not exist in ALP
    utils_1.removeElementsFromEnum(appSchema['definitions']['TableColumnExtensionTypeV2']['enum'], [
        v2_1.TableColumnExtensionTypeV2.TreeTableColumnsExtension
    ]);
    if (!appSchema['definitions']['Sections']) {
        if (appSchema['definitions']['RelatedFacetKeys'] &&
            appSchema['definitions']['RelatedFacetKeys']['oneOf'].length) {
            // If related facets exists - then we need sections definition
            appSchema['definitions']['Sections'] = {
                type: 'object',
                properties: additionalSections,
                additionalProperties: false,
                isViewNode: true
            };
        }
        else {
            delete appSchema['properties']['sections'];
        }
    }
    const v2Page = import_1.findObjectPage(manifest[common_2.ManifestSection.generic].pages, entitySet.name, []);
    if (!v2Page) {
        v2_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOALP'),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return appSchema;
    }
    // Eliminate generic definitions
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSectionTableV2'];
    delete appSchema['definitions']['GenericColumns'];
    delete appSchema['definitions']['ObjectPageSubSections'];
    delete appSchema['definitions']['ObjectPageResponsiveTableWithMultiSelect'];
    delete appSchema['definitions']['ObjectPageResponsiveTableWithInlineDelete'];
    delete appSchema['definitions']['ObjectPageAnalyticalTable'];
    delete appSchema['definitions']['ObjectPageTreeTable'];
    delete appSchema['definitions']['ObjectPageGridTable'];
    delete appSchema['definitions']['ObjectPageToolBar'];
    delete appSchema['definitions']['ObjectPageToolBarActions'];
    delete appSchema['definitions']['ObjectPageToolBarAction'];
    return appSchema;
}
exports.generateObjectPageSchemaV2 = generateObjectPageSchemaV2;
//# sourceMappingURL=objectPage.js.map