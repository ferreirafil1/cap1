"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockMiddleware = void 0;
var router_1 = __importDefault(require("router"));
var logger_1 = require("@ui5/logger");
var odata_1 = require("./router/odata");
var catalog_1 = require("./router/catalog");
var fs = __importStar(require("fs"));
var path_1 = __importDefault(require("path"));
var url_1 = __importDefault(require("url"));
var fileLoader_1 = require("./router/utils/fileLoader");
function disableCache(req, res, next) {
    res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');
    res.header('Expires', '-1');
    res.header('Pragma', 'no-cache');
    next();
}
function encode(str) {
    return str.replace(/'/g, '%27');
}
function isFolderBasedConfig(serverConfig) {
    return serverConfig.mockFolder !== undefined;
}
function createMockMiddleware(config) {
    return __awaiter(this, void 0, void 0, function () {
        var app, log, mockConfig, serverInit_1, nise, fakeServer, escapePath, mockServer, serverhook_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = router_1.default();
                    log = logger_1.getLogger('server:ux-fe-mockserver');
                    app.use(function (req, res, next) {
                        next();
                    });
                    app.use(disableCache);
                    if (!isFolderBasedConfig(config)) return [3 /*break*/, 2];
                    mockConfig = void 0;
                    if (fs.existsSync(path_1.default.join(config.mockFolder, 'config.js'))) {
                        mockConfig = require(path_1.default.join(config.mockFolder, 'config.js'));
                    }
                    else {
                        mockConfig = JSON.parse(fs.readFileSync(path_1.default.join(config.mockFolder, 'config.json')).toString('utf-8'));
                    }
                    return [4 /*yield*/, Promise.all(mockConfig.map(function (mockConfig) { return __awaiter(_this, void 0, void 0, function () {
                            var subConfig, oDataHandlerInstance, subRouter, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        subConfig = {
                                            service: mockConfig
                                        };
                                        if (subConfig.service.metadataXmlPath) {
                                            subConfig.service.metadataXmlPath = path_1.default.resolve(config.mockFolder, subConfig.service.metadataXmlPath);
                                        }
                                        if (subConfig.service.metadataCdsPath) {
                                            subConfig.service.metadataCdsPath = path_1.default.resolve(config.mockFolder, subConfig.service.metadataCdsPath);
                                        }
                                        subConfig.service.mockdataRootPath = path_1.default.resolve(config.mockFolder, subConfig.service.mockdataRootPath);
                                        if (!subConfig.service.urlBasePath) {
                                            subConfig.service.urlBasePath = '';
                                        }
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, odata_1.oDataHandler(subConfig)];
                                    case 2:
                                        oDataHandlerInstance = _a.sent();
                                        if (config.contextBasedIsolation) {
                                            subRouter = router_1.default();
                                            subRouter.use(subConfig.service.urlBasePath + "/" + subConfig.service.name, oDataHandlerInstance);
                                            subRouter.use(subConfig.service.urlBasePath + "/" + encode(subConfig.service.name), oDataHandlerInstance);
                                            app.use(/^\/tenant-(\d{1,3})/, subRouter);
                                        }
                                        if (config.debug) {
                                            log.info("Mockdata location: " + subConfig.service.mockdataRootPath);
                                            log.info("Service path: " + subConfig.service.urlBasePath + "/" + subConfig.service.name);
                                        }
                                        app.use(subConfig.service.urlBasePath + "/" + subConfig.service.name, oDataHandlerInstance);
                                        app.use(subConfig.service.urlBasePath + "/" + encode(subConfig.service.name), oDataHandlerInstance);
                                        app.use('/sap/opu/odata/IWFND/CATALOGSERVICE;v=2', catalog_1.catalogService(subConfig));
                                        return [3 /*break*/, 4];
                                    case 3:
                                        e_1 = _a.sent();
                                        if (config.debug) {
                                            console.error(e_1);
                                        }
                                        console.log('Failed to start ' + subConfig.service.urlBasePath + '/' + subConfig.service.name);
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    if (!config.service.urlBasePath) {
                        config.service.urlBasePath = '';
                    }
                    log.info("Mockdata location: " + config.service.mockdataRootPath);
                    log.info("Service path: " + config.service.urlBasePath + "/" + config.service.name);
                    if (fileLoader_1.isInBrowser()) {
                        nise = require('nise');
                        fakeServer = nise.fakeServer;
                        escapePath = function (sPath) {
                            // eslint-disable-next-line
                            return sPath.replace(/[\\\/\[\]\{\}\(\)\-\*\+\?\.\^\$\|]/g, '\\$&');
                        };
                        nise.fakeXhr.FakeXMLHttpRequest.useFilters = true;
                        mockServer = fakeServer.create();
                        mockServer.autoRespond = true;
                        serverhook_1 = new RegExp(escapePath(config.service.urlBasePath) + '.*');
                        nise.fakeXhr.FakeXMLHttpRequest.addFilter(function (method, url, async, username, password) {
                            return !serverhook_1.test(url);
                        });
                        mockServer.respondWith(serverhook_1, function (xhr, id) {
                            return __awaiter(this, void 0, void 0, function () {
                                var parsedUrl, req, oBoundaryRegex, sBoundary, responseHeaders, responseStatusCode, responseContentType, responseBuffer, res;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            parsedUrl = url_1.default.parse(xhr.url);
                                            req = {
                                                url: parsedUrl.href,
                                                method: xhr.method,
                                                body: xhr.requestBody,
                                                headers: xhr.requestHeaders
                                            };
                                            if (req.headers['Content-Type'] === 'multipart/mixed;charset=utf-8') {
                                                oBoundaryRegex = new RegExp('batch_[a-z0-9-]*');
                                                sBoundary = oBoundaryRegex.exec(req.body)[0];
                                                req.headers['Content-Type'] = 'multipart/mixed; boundary=' + sBoundary;
                                            }
                                            Object.keys(req.headers).forEach(function (headerText) {
                                                req.headers[headerText.toLowerCase()] = req.headers[headerText];
                                            });
                                            responseHeaders = {};
                                            responseStatusCode = 200;
                                            responseBuffer = '';
                                            res = {
                                                header: function (headerName, headerValue) {
                                                    //responseHeaders[headerName] = headerValue;
                                                    responseHeaders[headerName.toLowerCase()] = headerValue;
                                                },
                                                getHeader: function (headerName) {
                                                    return responseHeaders[headerName];
                                                },
                                                setHeader: function (headerName, headerValue) {
                                                    res.header(headerName, headerValue);
                                                },
                                                status: function (statusCode) {
                                                    responseStatusCode = statusCode;
                                                },
                                                type: function (contentType) {
                                                    responseContentType = contentType;
                                                    return res;
                                                },
                                                contentType: function (contentType) {
                                                    responseContentType = contentType;
                                                    res.header('Content-Type', responseContentType);
                                                    return res;
                                                },
                                                write: function (data) {
                                                    responseBuffer += data;
                                                },
                                                end: function () {
                                                    res.send(responseBuffer);
                                                },
                                                send: function (data) {
                                                    xhr.readyState = 1;
                                                    if (typeof data === 'object') {
                                                        data = JSON.stringify(data);
                                                    }
                                                    xhr.respond(responseStatusCode, responseHeaders, data);
                                                }
                                            };
                                            xhr.readyState = 4;
                                            return [4 /*yield*/, serverInit_1];
                                        case 1:
                                            _a.sent();
                                            app(req, res, function (arg1, arg2, arg3) {
                                                console.error(arg1);
                                            });
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        });
                        app.mockServer = mockServer;
                    }
                    serverInit_1 = odata_1.oDataHandler(config).then(function (oDataHandlerInstance) {
                        app.use(config.service.urlBasePath + "/" + config.service.name, oDataHandlerInstance);
                        app.use(config.service.urlBasePath + "/" + encode(config.service.name), oDataHandlerInstance);
                        app.use('/sap/opu/odata/IWFND/CATALOGSERVICE;v=2', catalog_1.catalogService(config));
                        return true;
                    });
                    app.readyPromise = serverInit_1;
                    _a.label = 3;
                case 3: return [2 /*return*/, app];
            }
        });
    });
}
exports.createMockMiddleware = createMockMiddleware;
//# sourceMappingURL=data:application/json;base64,