"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var middleware_1 = require("./middleware");
var path = __importStar(require("path"));
var fileLoader_1 = require("./router/utils/fileLoader");
function FEMiddleware(_a) {
    var resources = _a.resources, options = _a.options;
    // Basepath will be the webapp folder
    var basePath = resources ? path.resolve(resources.rootProject._readers[0]._fsBasePath, '..') : '';
    var serverConfig = options.configuration;
    if (serverConfig.mockFolder) {
        serverConfig.mockFolder = path.resolve(basePath, serverConfig.mockFolder);
    }
    else {
        serverConfig.service.metadataXmlPath = fileLoader_1.resolvePath(basePath, serverConfig.service.metadataXmlPath);
        serverConfig.service.mockdataRootPath = fileLoader_1.resolvePath(basePath, serverConfig.service.mockdataRootPath);
    }
    return middleware_1.createMockMiddleware(serverConfig);
}
module.exports = FEMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBb0Q7QUFDcEQseUNBQTZCO0FBRTdCLHdEQUF3RDtBQUV4RCxTQUFTLFlBQVksQ0FBQyxFQUFzQjtRQUFwQixTQUFTLGVBQUEsRUFBRSxPQUFPLGFBQUE7SUFDdEMscUNBQXFDO0lBQ3JDLElBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNwRyxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQzNDLElBQUksWUFBWSxDQUFDLFVBQVUsRUFBRTtRQUN6QixZQUFZLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM3RTtTQUFNO1FBQ0gsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsd0JBQVcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuRyxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLHdCQUFXLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUN4RztJQUNELE9BQU8saUNBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUNELGlCQUFTLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1vY2tNaWRkbGV3YXJlIH0gZnJvbSAnLi9taWRkbGV3YXJlJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgUm91dGVyIGZyb20gJ3JvdXRlcic7XG5pbXBvcnQgeyByZXNvbHZlUGF0aCB9IGZyb20gJy4vcm91dGVyL3V0aWxzL2ZpbGVMb2FkZXInO1xuXG5mdW5jdGlvbiBGRU1pZGRsZXdhcmUoeyByZXNvdXJjZXMsIG9wdGlvbnMgfSk6IFByb21pc2U8Um91dGVyPiB7XG4gICAgLy8gQmFzZXBhdGggd2lsbCBiZSB0aGUgd2ViYXBwIGZvbGRlclxuICAgIGNvbnN0IGJhc2VQYXRoID0gcmVzb3VyY2VzID8gcGF0aC5yZXNvbHZlKHJlc291cmNlcy5yb290UHJvamVjdC5fcmVhZGVyc1swXS5fZnNCYXNlUGF0aCwgJy4uJykgOiAnJztcbiAgICBjb25zdCBzZXJ2ZXJDb25maWcgPSBvcHRpb25zLmNvbmZpZ3VyYXRpb247XG4gICAgaWYgKHNlcnZlckNvbmZpZy5tb2NrRm9sZGVyKSB7XG4gICAgICAgIHNlcnZlckNvbmZpZy5tb2NrRm9sZGVyID0gcGF0aC5yZXNvbHZlKGJhc2VQYXRoLCBzZXJ2ZXJDb25maWcubW9ja0ZvbGRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VydmVyQ29uZmlnLnNlcnZpY2UubWV0YWRhdGFYbWxQYXRoID0gcmVzb2x2ZVBhdGgoYmFzZVBhdGgsIHNlcnZlckNvbmZpZy5zZXJ2aWNlLm1ldGFkYXRhWG1sUGF0aCk7XG4gICAgICAgIHNlcnZlckNvbmZpZy5zZXJ2aWNlLm1vY2tkYXRhUm9vdFBhdGggPSByZXNvbHZlUGF0aChiYXNlUGF0aCwgc2VydmVyQ29uZmlnLnNlcnZpY2UubW9ja2RhdGFSb290UGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVNb2NrTWlkZGxld2FyZShzZXJ2ZXJDb25maWcpO1xufVxuZXhwb3J0ID0gRkVNaWRkbGV3YXJlO1xuIl19