import { ODataRequest } from '../request/odataRequest';
import { EntitySet, EntityType, Action, Property } from '@sap-ux/annotation-converter';
import { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';
import { DataAccessInterface, EntitySetInterface } from './common';
export declare class MockDataEntitySet implements EntitySetInterface {
    static read(mockDataRootFolder: string, entity: string, generateMockData: boolean, isDraft: boolean): Promise<object[]>;
    protected _rootMockData: object[];
    private _rootMockDataFn;
    protected contextBasedMockData: Record<string, FileBasedMockData>;
    readyPromise: Promise<MockDataEntitySet>;
    protected entitySetDefinition: EntitySet | null;
    protected entityTypeDefinition: EntityType;
    protected dataAccess: DataAccessInterface;
    constructor(rootFolder: string, entitySetDefinition: EntitySet | EntityType, dataAccess: DataAccessInterface, generateMockData: boolean, initializeMockData?: boolean, isDraft?: boolean);
    getMockData(contextId: string): FileBasedMockData;
    protected checkKeys(keyValues: KeyDefinitions, dataLine: object, keyDefinition: Property[]): boolean;
    protected checkSpecificProperties(filterExpression: any, mockData: any, allData: any, forceToLower?: boolean): boolean;
    isV4(): boolean;
    checkFilter(mockData: object, filterExpression: any, tenantId: string): boolean;
    checkSearch(mockData: object, searchQuery: string): boolean;
    checkKeyValue(mockData: object, keyValues: object, keyName: string, keyProp?: Property): boolean;
    getKeys(dataLine: object): Record<string, string | number | boolean>;
    protected prepareKeys(keyValues: KeyDefinitions): KeyDefinitions;
    performGET(keyValues: KeyDefinitions, asArray: boolean, tenantId: string, dontClone?: boolean): any;
    performPOST(keyValues: KeyDefinitions, postData: object, tenantId: string): any;
    performPATCH(keyValues: KeyDefinitions, patchData: object, tenantId: string): any;
    performDELETE(keyValues: KeyDefinitions, tenantId: string): Promise<void>;
    executeAction(actionDefinition: Action, actionData: object, odataRequest: ODataRequest, keys: Record<string, any>): Promise<any>;
}
