"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBasedMockData = void 0;
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
var id_1 = require("./id");
var FileBasedMockData = /** @class */ (function () {
    function FileBasedMockData(mockData, entityType, mockDataEntitySet) {
        var _this = this;
        this._entityType = entityType;
        this._mockDataEntitySet = mockDataEntitySet;
        if (mockData.length === 0 && mockData.__generateMockData) {
            this._mockData = this.generateMockData();
        }
        else {
            this._mockData = lodash_clonedeep_1.default(mockData);
            if (this._mockData.forEach) {
                this._mockData.forEach(function (mockLine) {
                    // We need to ensure that complex types are at least partially created
                    _this._entityType.entityProperties.forEach(function (prop) {
                        if (prop.targetType && !mockLine[prop.name]) {
                            mockLine[prop.name] = {};
                            prop.targetType.properties.forEach(function (subProp) {
                                mockLine[prop.name][subProp.name] = _this.getDefaultValueFromType(subProp.type, subProp.targetType, subProp.defaultValue);
                            });
                        }
                    });
                });
            }
        }
    }
    FileBasedMockData.prototype.addEntry = function (mockEntry) {
        this._mockData.push(mockEntry);
    };
    FileBasedMockData.prototype.updateEntry = function (keyValues, updatedData) {
        var dataIndex = this.getDataIndex(keyValues);
        this._mockData[dataIndex] = updatedData;
    };
    FileBasedMockData.prototype.fetchEntries = function (keyValues) {
        var _this = this;
        var keys = this._entityType.keys;
        return this._mockData.filter(function (mockData) {
            return Object.keys(keyValues).every(function (keyName) {
                return _this._mockDataEntitySet.checkKeyValue(mockData, keyValues, keyName, keys.find(function (keyProp) { return keyProp.name === keyName; }));
            });
        });
    };
    FileBasedMockData.prototype.hasEntry = function (keyValues) {
        return this.getDataIndex(keyValues) !== -1;
    };
    FileBasedMockData.prototype.hasEntries = function () {
        return this._mockData.length > 0;
    };
    FileBasedMockData.prototype.getAllEntries = function () {
        return lodash_clonedeep_1.default(this._mockData);
    };
    FileBasedMockData.prototype.getDataIndex = function (keyValues) {
        var _this = this;
        var keys = this._entityType.keys;
        return this._mockData.findIndex(function (mockData) {
            return Object.keys(keyValues).every(function (keyName) {
                return _this._mockDataEntitySet.checkKeyValue(mockData, keyValues, keyName, keys.find(function (keyProp) { return keyProp.name === keyName; }));
            });
        });
    };
    FileBasedMockData.prototype.removeEntry = function (keyValues) {
        var dataIndex = this.getDataIndex(keyValues);
        if (dataIndex !== -1) {
            this._mockData.splice(dataIndex, 1);
        }
    };
    FileBasedMockData.prototype.getDefaultValueFromType = function (type, complexType, defaultValue) {
        var _this = this;
        if (complexType) {
            var outData_1 = {};
            complexType.properties.forEach(function (subProp) {
                outData_1[subProp.name] = _this.getDefaultValueFromType(subProp.type, subProp.targetType, subProp.defaultValue);
            });
            return outData_1;
        }
        else {
            if (defaultValue !== undefined) {
                return defaultValue;
            }
            switch (type) {
                case 'Edm.Int16':
                case 'Edm.Byte':
                case 'Edm.Int32':
                case 'Edm.Int64':
                    return 0;
                case 'Edm.Boolean':
                    return false;
                default:
                    return '';
            }
        }
    };
    FileBasedMockData.prototype.getRandomValueFromType = function (type, complexType, propertyName, lineIndex) {
        var _this = this;
        if (complexType) {
            var outData_2 = {};
            complexType.properties.forEach(function (subProp) {
                outData_2[subProp.name] = _this.getRandomValueFromType(subProp.type, subProp.targetType, subProp.name, lineIndex);
            });
            return outData_2;
        }
        else {
            switch (type) {
                case 'Edm.Int16':
                case 'Edm.Int32':
                case 'Edm.Int64':
                    return Math.floor(Math.random() * 10000);
                case 'Edm.String':
                    return propertyName + "_" + lineIndex;
                case 'Edm.Boolean':
                    return Math.random() < 0.5;
                case 'Edm.Byte':
                    return Math.floor(Math.random() * 10);
                case 'Edm.Decimal':
                    return Math.floor(Math.random() * 100000) / 100;
                case 'Edm.Guid':
                    return id_1.uuidv4();
                case 'Edm.Date':
                case 'Edm.DateTime':
                case 'Edm.DateTimeOffset': {
                    var date = new Date();
                    date.setFullYear(2000 + Math.floor(Math.random() * 22));
                    date.setDate(Math.floor(Math.random() * 30));
                    date.setMonth(Math.floor(Math.random() * 12));
                    date.setMilliseconds(0);
                    return this._mockDataEntitySet.isV4() ? date.toISOString() : '/Date(' + date.getTime() + '+0000)/';
                }
                case 'Edm.Time':
                case 'Time':
                    // ODataModel expects ISO8601 duration format
                    return ('PT' +
                        Math.floor(Math.random() * 23) +
                        'H' +
                        Math.floor(Math.random() * 59) +
                        'M' +
                        Math.floor(Math.random() * 59) +
                        'S');
                case 'Edm.TimeOfDay':
                case 'Edm.Binary':
                default:
                    return '';
                    break;
            }
        }
    };
    FileBasedMockData.prototype.getEmptyObject = function () {
        var _this = this;
        var outObj = {};
        this._entityType.entityProperties.forEach(function (property) {
            outObj[property.name] = _this.getDefaultValueFromType(property.type, property.targetType, property.defaultValue);
        });
        return outObj;
    };
    FileBasedMockData.prototype.getDefaultElement = function () {
        if (this._mockData && !this._mockData.length) {
            return this._mockData;
        }
        else if (this._mockData.length >= 1) {
            return lodash_clonedeep_1.default(this._mockData[0]);
        }
        else {
            return this.getEmptyObject();
        }
    };
    FileBasedMockData.prototype.generateKey = function (property, lineIndex) {
        var currentMockData = this._mockData;
        var highestIndex;
        switch (property.type) {
            case 'Edm.Int32':
                highestIndex = 0;
                currentMockData.forEach(function (mockLine) {
                    var lineIndex = parseInt(mockLine[property.name]);
                    highestIndex = Math.max(highestIndex, lineIndex);
                });
                return highestIndex + 1;
            case 'Edm.Boolean':
                return Math.random() > 0.5;
            case 'Edm.Guid':
                return id_1.uuidv4();
            case 'Edm.String':
                if (lineIndex === undefined) {
                    lineIndex = currentMockData.length + 1;
                }
                return property.name + "_" + lineIndex;
            default:
                return id_1.generateId(12);
        }
    };
    FileBasedMockData.prototype.generateMockDataLine = function (iIndex) {
        var _this = this;
        var outObj = {};
        this._entityType.entityProperties.forEach(function (property) {
            if (property.isKey) {
                outObj[property.name] = _this.generateKey(property, iIndex);
            }
            else {
                outObj[property.name] = _this.getRandomValueFromType(property.type, property.targetType, property.name, iIndex);
            }
        });
        return outObj;
    };
    FileBasedMockData.prototype.generateMockData = function () {
        var mockData = [];
        for (var i = 0; i < 150; i++) {
            mockData.push(this.generateMockDataLine(i));
        }
        return mockData;
    };
    /**
     * Allow to modify the action data beforehand
     * @param actionDefinition
     * @param actionData
     */
    FileBasedMockData.prototype.onBeforeAction = function (actionDefinition, actionData, keys) {
        return actionData;
    };
    /**
     * Do something with the action
     * @param actionDefinition
     * @param actionData
     */
    FileBasedMockData.prototype.executeAction = function (actionDefinition, actionData, keys) {
        return actionData;
    };
    /**
     * Allow to modify the response data
     * @param actionDefinition
     * @param actionData
     */
    FileBasedMockData.prototype.onAfterAction = function (actionDefinition, actionData, keys, responseData) {
        return responseData;
    };
    //eslint-disable-next-line
    FileBasedMockData.prototype.onAfterUpdateEntry = function (keyValues, updatedData) { };
    //eslint-disable-next-line
    FileBasedMockData.prototype.onBeforeUpdateEntry = function (keyValues, updatedData) { };
    //eslint-disable-next-line
    FileBasedMockData.prototype.hasCustomAggregate = function (customAggregateName) {
        return false;
    };
    //eslint-disable-next-line
    FileBasedMockData.prototype.performCustomAggregate = function (customAggregateName, dataToAggregate) { };
    return FileBasedMockData;
}());
exports.FileBasedMockData = FileBasedMockData;
//# sourceMappingURL=data:application/json;base64,