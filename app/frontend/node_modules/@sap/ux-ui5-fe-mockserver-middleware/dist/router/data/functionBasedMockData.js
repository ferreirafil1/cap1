"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionBasedMockData = void 0;
var fileBasedMockData_1 = require("./fileBasedMockData");
var common_1 = require("./common");
var FunctionBasedMockData = /** @class */ (function (_super) {
    __extends(FunctionBasedMockData, _super);
    function FunctionBasedMockData(mockDataFn, entityType, mockDataEntitySet, contextId) {
        var _this = _super.call(this, ((mockDataFn === null || mockDataFn === void 0 ? void 0 : mockDataFn.getInitialDataSet) ? mockDataFn.getInitialDataSet(contextId) : []) || [], entityType, mockDataEntitySet) || this;
        _this._mockDataFn = mockDataFn;
        _this._mockDataFn.base = {
            addEntry: _super.prototype.addEntry.bind(_this),
            updateEntry: _super.prototype.updateEntry.bind(_this),
            removeEntry: _super.prototype.removeEntry.bind(_this),
            fetchEntries: _super.prototype.fetchEntries.bind(_this),
            hasEntry: _super.prototype.hasEntry.bind(_this),
            hasEntries: _super.prototype.hasEntries.bind(_this),
            getAllEntries: _super.prototype.getAllEntries.bind(_this),
            getEmptyObject: _super.prototype.getEmptyObject.bind(_this),
            getDefaultElement: _super.prototype.getDefaultElement.bind(_this)
        };
        _this._mockDataFn.throwError = function (message, statusCode, messageData, isSAPMessage) {
            if (statusCode === void 0) { statusCode = 500; }
            if (isSAPMessage === void 0) { isSAPMessage = false; }
            var executionError = new common_1.ExecutionError(message, statusCode, messageData, isSAPMessage);
            throw executionError;
        };
        return _this;
    }
    FunctionBasedMockData.prototype.addEntry = function (mockEntry) {
        if (this._mockDataFn.addEntry) {
            return this._mockDataFn.addEntry(mockEntry);
        }
        return _super.prototype.addEntry.call(this, mockEntry);
    };
    FunctionBasedMockData.prototype.updateEntry = function (keyValues, updatedData) {
        if (this._mockDataFn.updateEntry) {
            return this._mockDataFn.updateEntry(keyValues, updatedData);
        }
        return _super.prototype.updateEntry.call(this, keyValues, updatedData);
    };
    FunctionBasedMockData.prototype.removeEntry = function (keyValues) {
        if (this._mockDataFn.removeEntry) {
            return this._mockDataFn.removeEntry(keyValues);
        }
        return _super.prototype.removeEntry.call(this, keyValues);
    };
    FunctionBasedMockData.prototype.fetchEntries = function (keyValues) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.fetchEntries) {
            return this._mockDataFn.fetchEntries(keyValues);
        }
        else {
            return _super.prototype.fetchEntries.call(this, keyValues);
        }
    };
    FunctionBasedMockData.prototype.hasEntry = function (keyValues) {
        if (this._mockDataFn.hasEntry) {
            return this._mockDataFn.hasEntry(keyValues);
        }
        return _super.prototype.hasEntry.call(this, keyValues);
    };
    FunctionBasedMockData.prototype.hasEntries = function () {
        if (this._mockDataFn.hasEntries) {
            return this._mockDataFn.hasEntries();
        }
        return _super.prototype.hasEntries.call(this);
    };
    FunctionBasedMockData.prototype.getEmptyObject = function () {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getEmptyObject) {
            return this._mockDataFn.getEmptyObject();
        }
        else {
            return _super.prototype.getEmptyObject.call(this);
        }
    };
    FunctionBasedMockData.prototype.getDefaultElement = function () {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getDefaultElement) {
            return this._mockDataFn.getDefaultElement();
        }
        else {
            return _super.prototype.getDefaultElement.call(this);
        }
    };
    FunctionBasedMockData.prototype.generateKey = function (property, lineIndex) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.generateKey) {
            return this._mockDataFn.generateKey(property);
        }
        else {
            return _super.prototype.generateKey.call(this, property, lineIndex);
        }
    };
    FunctionBasedMockData.prototype.getAllEntries = function () {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.getAllEntries) {
            return this._mockDataFn.getAllEntries();
        }
        else {
            return _super.prototype.getAllEntries.call(this);
        }
    };
    FunctionBasedMockData.prototype.onBeforeAction = function (actionDefinition, actionData, keys) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onBeforeAction) {
            return this._mockDataFn.onBeforeAction(actionDefinition, actionData, keys);
        }
        else {
            return _super.prototype.onBeforeAction.call(this, actionDefinition, actionData, keys);
        }
    };
    FunctionBasedMockData.prototype.executeAction = function (actionDefinition, actionData, keys) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.executeAction) {
            return this._mockDataFn.executeAction(actionDefinition, actionData, keys);
        }
        else {
            return _super.prototype.executeAction.call(this, actionDefinition, actionData, keys);
        }
    };
    FunctionBasedMockData.prototype.onAfterAction = function (actionDefinition, actionData, keys, responseData) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onAfterAction) {
            return this._mockDataFn.onAfterAction(actionDefinition, actionData, keys, responseData);
        }
        else {
            return _super.prototype.onAfterAction.call(this, actionDefinition, actionData, keys, responseData);
        }
    };
    FunctionBasedMockData.prototype.onAfterUpdateEntry = function (keyValues, updatedData) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onAfterUpdateEntry) {
            return this._mockDataFn.onAfterUpdateEntry(keyValues, updatedData);
        }
        else {
            return _super.prototype.onAfterUpdateEntry.call(this, keyValues, updatedData);
        }
    };
    FunctionBasedMockData.prototype.onBeforeUpdateEntry = function (keyValues, updatedData) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.onBeforeUpdateEntry) {
            return this._mockDataFn.onBeforeUpdateEntry(keyValues, updatedData);
        }
        else {
            return _super.prototype.onBeforeUpdateEntry.call(this, keyValues, updatedData);
        }
    };
    FunctionBasedMockData.prototype.hasCustomAggregate = function (customAggregateName) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.hasCustomAggregate) {
            return this._mockDataFn.hasCustomAggregate(customAggregateName);
        }
        else {
            return _super.prototype.hasCustomAggregate.call(this, customAggregateName);
        }
    };
    FunctionBasedMockData.prototype.performCustomAggregate = function (customAggregateName, dataToAggregate) {
        var _a;
        if ((_a = this._mockDataFn) === null || _a === void 0 ? void 0 : _a.performCustomAggregate) {
            return this._mockDataFn.performCustomAggregate(customAggregateName, dataToAggregate);
        }
        else {
            return _super.prototype.performCustomAggregate.call(this, customAggregateName, dataToAggregate);
        }
    };
    return FunctionBasedMockData;
}(fileBasedMockData_1.FileBasedMockData));
exports.FunctionBasedMockData = FunctionBasedMockData;
//# sourceMappingURL=data:application/json;base64,