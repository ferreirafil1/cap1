import { ComplexType, Property, EntityType } from '@sap-ux/annotation-converter';
import { Action } from '@sap-ux/vocabularies-types';
import { EntitySetInterface } from './common';
export declare type KeyDefinitions = Record<string, number | boolean | string>;
export declare class FileBasedMockData {
    protected _mockData: object[];
    protected _entityType: EntityType;
    protected _mockDataEntitySet: EntitySetInterface;
    constructor(mockData: object[], entityType: EntityType, mockDataEntitySet: EntitySetInterface);
    addEntry(mockEntry: any): void;
    updateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    fetchEntries(keyValues: KeyDefinitions): object[];
    hasEntry(keyValues: KeyDefinitions): boolean;
    hasEntries(): boolean;
    getAllEntries(): object[];
    protected getDataIndex(keyValues: KeyDefinitions): number;
    removeEntry(keyValues: KeyDefinitions): void;
    protected getDefaultValueFromType(type: string, complexType: ComplexType, defaultValue?: any): any;
    protected getRandomValueFromType(type: string, complexType: ComplexType, propertyName: string, lineIndex: number): any;
    getEmptyObject(): object;
    getDefaultElement(): object;
    generateKey(property: Property, lineIndex?: number): any;
    generateMockDataLine(iIndex: number): {};
    generateMockData(): any[];
    /**
     * Allow to modify the action data beforehand
     * @param actionDefinition
     * @param actionData
     */
    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    /**
     * Do something with the action
     * @param actionDefinition
     * @param actionData
     */
    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    /**
     * Allow to modify the response data
     * @param actionDefinition
     * @param actionData
     */
    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any;
    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    hasCustomAggregate(customAggregateName: string): boolean;
    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any;
}
