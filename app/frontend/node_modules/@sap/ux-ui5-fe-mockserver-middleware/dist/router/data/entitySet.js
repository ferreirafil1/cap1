"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDataEntitySet = void 0;
var path_1 = require("path");
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
var fileBasedMockData_1 = require("./fileBasedMockData");
var functionBasedMockData_1 = require("./functionBasedMockData");
var fileLoader_1 = require("../utils/fileLoader");
var MockDataEntitySet = /** @class */ (function () {
    function MockDataEntitySet(rootFolder, entitySetDefinition, dataAccess, generateMockData, initializeMockData, isDraft) {
        var _this = this;
        if (initializeMockData === void 0) { initializeMockData = true; }
        if (isDraft === void 0) { isDraft = false; }
        this._rootMockData = [];
        this.contextBasedMockData = {};
        if (entitySetDefinition._type === 'EntityType') {
            this.entitySetDefinition = null;
            this.entityTypeDefinition = entitySetDefinition;
        }
        else {
            this.entitySetDefinition = entitySetDefinition;
            this.entityTypeDefinition = this.entitySetDefinition.entityType;
        }
        this.dataAccess = dataAccess;
        if (initializeMockData) {
            this.readyPromise = MockDataEntitySet.read(rootFolder, entitySetDefinition.name, generateMockData, isDraft).then(function (mockData) {
                if (typeof mockData === 'object' && !Array.isArray(mockData)) {
                    _this._rootMockDataFn = mockData;
                }
                else {
                    _this._rootMockData = mockData;
                }
                return _this;
            });
        }
    }
    MockDataEntitySet.read = function (mockDataRootFolder, entity, generateMockData, isDraft) {
        return __awaiter(this, void 0, void 0, function () {
            var path, jsPath, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = path_1.join(mockDataRootFolder, entity) + '.json';
                        jsPath = path_1.join(mockDataRootFolder, entity) + '.js';
                        return [4 /*yield*/, fileLoader_1.exists(jsPath)];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        try {
                            //eslint-disable-next-line
                            return [2 /*return*/, fileLoader_1.loadJS(jsPath)];
                        }
                        catch (e) {
                            console.error(e);
                            return [2 /*return*/, Promise.resolve([])];
                        }
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, fileLoader_1.exists(path)];
                    case 3:
                        if (_a.sent()) {
                            try {
                                return [2 /*return*/, fileLoader_1.loadFile(path).then(function (fileContent) {
                                        if (fileContent.length === 0) {
                                            return [];
                                        }
                                        var jsonData = JSON.parse(fileContent);
                                        if (isDraft) {
                                            jsonData.forEach(function (jsonLine) {
                                                var IsActiveEntityValue = jsonLine.IsActiveEntity;
                                                if (IsActiveEntityValue === undefined) {
                                                    jsonLine.IsActiveEntity = true;
                                                    jsonLine.HasActiveEntity = true;
                                                    jsonLine.HasDraftEntity = false;
                                                }
                                            });
                                        }
                                        return jsonData;
                                    })];
                            }
                            catch (_b) {
                                return [2 /*return*/, Promise.resolve([])];
                            }
                        }
                        else {
                            out = [];
                            if (generateMockData) {
                                out.__generateMockData = generateMockData;
                            }
                            return [2 /*return*/, Promise.resolve(out)];
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MockDataEntitySet.prototype.getMockData = function (contextId) {
        if (!Object.prototype.hasOwnProperty.apply(this.contextBasedMockData, [contextId])) {
            this.contextBasedMockData[contextId] = this._rootMockDataFn
                ? new functionBasedMockData_1.FunctionBasedMockData(this._rootMockDataFn, this.entityTypeDefinition, this, contextId)
                : new fileBasedMockData_1.FileBasedMockData(this._rootMockData, this.entityTypeDefinition, this);
        }
        return this.contextBasedMockData[contextId];
    };
    MockDataEntitySet.prototype.checkKeys = function (keyValues, dataLine, keyDefinition) {
        var _this = this;
        return Object.keys(keyValues).every(function (keyName) {
            return _this.checkKeyValue(dataLine, keyValues, keyName, keyDefinition.find(function (keyProp) { return keyProp.name === keyName; }));
        });
    };
    MockDataEntitySet.prototype.checkSpecificProperties = function (filterExpression, mockData, allData, forceToLower) {
        if (forceToLower === void 0) { forceToLower = false; }
        return true;
    };
    MockDataEntitySet.prototype.isV4 = function () {
        return this.dataAccess.isV4();
    };
    MockDataEntitySet.prototype.checkFilter = function (mockData, filterExpression, tenantId) {
        var _this = this;
        var isValid = true;
        if (Array.isArray(filterExpression)) {
            if (filterExpression.operator === 'AND') {
                isValid = filterExpression.every(function (filterValue) {
                    return _this.checkFilter(mockData, filterValue, tenantId);
                });
            }
            else {
                isValid = filterExpression.some(function (filterValue) {
                    return _this.checkFilter(mockData, filterValue, tenantId);
                });
            }
        }
        else {
            var forceLowerCase = false;
            if (filterExpression.prop.indexOf('tolower') === 0) {
                forceLowerCase = true;
                filterExpression.prop = filterExpression.prop.substr(8, filterExpression.prop.length - 9);
            }
            if (filterExpression.eqValue.indexOf('tolower') === 0) {
                filterExpression.eqValue = filterExpression.eqValue
                    .substr(8, filterExpression.eqValue.length - 9)
                    .toLowerCase();
            }
            var property = this.entityTypeDefinition.entityProperties.find(function (prop) { return prop.name === filterExpression.prop; });
            if (!property) {
                var currentMockData = this.getMockData(tenantId);
                return this.checkSpecificProperties(filterExpression, mockData, currentMockData, forceLowerCase);
            }
            var hasIntValue = false;
            switch (property.type) {
                case 'Edm.Boolean':
                    isValid = !!mockData[filterExpression.prop] === (filterExpression.eqValue === 'true');
                    break;
                case 'Edm.String':
                case 'Edm.Guid':
                    if (filterExpression.eqValue && filterExpression.eqValue.startsWith("'")) {
                        var valueToTest = forceLowerCase
                            ? mockData[filterExpression.prop].toLowerCase()
                            : mockData[filterExpression.prop];
                        isValid =
                            valueToTest === filterExpression.eqValue.substr(1, filterExpression.eqValue.length - 2);
                    }
                    else {
                        isValid = mockData[filterExpression.prop] === filterExpression.eqValue;
                    }
                    break;
                case 'Edm.Byte':
                case 'Edm.Int16':
                case 'Edm.Int32':
                case 'Edm.Int64': {
                    var testValue = parseInt(filterExpression.eqValue);
                    switch (filterExpression.operator) {
                        case 'gt':
                            isValid = mockData[filterExpression.prop] > testValue;
                            break;
                        case 'ge':
                            isValid = mockData[filterExpression.prop] >= testValue;
                            break;
                        case 'lt':
                            isValid = mockData[filterExpression.prop] < testValue;
                            break;
                        case 'le':
                            isValid = mockData[filterExpression.prop] <= testValue;
                            break;
                        case 'ne':
                            isValid = mockData[filterExpression.prop] !== testValue;
                            break;
                        case 'eq':
                        default:
                            isValid = mockData[filterExpression.prop] === testValue;
                            break;
                    }
                    break;
                }
                case 'Edm.Decimal': {
                    var testValue = parseFloat(filterExpression.eqValue);
                    switch (filterExpression.operator) {
                        case 'gt':
                            isValid = mockData[filterExpression.prop] > testValue;
                            break;
                        case 'ge':
                            isValid = mockData[filterExpression.prop] >= testValue;
                            break;
                        case 'lt':
                            isValid = mockData[filterExpression.prop] < testValue;
                            break;
                        case 'le':
                            isValid = mockData[filterExpression.prop] <= testValue;
                            break;
                        case 'ne':
                            isValid = mockData[filterExpression.prop] !== testValue;
                            break;
                        case 'eq':
                        default:
                            isValid = mockData[filterExpression.prop] === testValue;
                            break;
                    }
                    break;
                }
                default:
                    break;
            }
        }
        return isValid;
    };
    MockDataEntitySet.prototype.checkSearch = function (mockData, searchQuery) {
        return this.entityTypeDefinition.entityProperties
            .filter(function (property) {
            switch (property.type) {
                case 'Edm.Boolean':
                case 'Edm.Int32':
                    return false;
                case 'Edm.String':
                    return true;
                default:
                    return false;
            }
        })
            .some(function (property) {
            var mockValue = mockData[property.name];
            return mockValue && mockValue.indexOf(searchQuery) !== -1;
        });
    };
    MockDataEntitySet.prototype.checkKeyValue = function (mockData, keyValues, keyName, keyProp) {
        if (keyProp) {
            switch (keyProp.type) {
                case 'Edm.Guid':
                    if (keyValues[keyName] && keyValues[keyName].startsWith("guid'")) {
                        return mockData[keyName] === keyValues[keyName].substr(5, keyValues[keyName].length - 6);
                    }
                    return mockData[keyName] === keyValues[keyName];
                case 'Edm.String':
                    if (keyValues[keyName] && keyValues[keyName].startsWith("'")) {
                        return mockData[keyName] === keyValues[keyName].substr(1, keyValues[keyName].length - 2);
                    }
                    return mockData[keyName] === keyValues[keyName];
                case 'Edm.Int32':
                case 'Edm.Int64':
                case 'Edm.Int16':
                    return mockData[keyName] === parseInt(keyValues[keyName]);
                default:
                    return mockData[keyName] === keyValues[keyName];
            }
        }
        return mockData[keyName] === keyValues[keyName];
    };
    MockDataEntitySet.prototype.getKeys = function (dataLine) {
        var keys = this.entityTypeDefinition.keys;
        var keyValues = {};
        keys.forEach(function (keyProp) {
            keyValues[keyProp.name] = dataLine[keyProp.name];
        });
        return keyValues;
    };
    MockDataEntitySet.prototype.prepareKeys = function (keyValues) {
        var _this = this;
        var outKeys = {};
        if (keyValues === undefined) {
            return outKeys;
        }
        if (Object.keys(keyValues).length === 1 && Object.values(keyValues)[0] === undefined) {
            var keyValue_1;
            Object.keys(keyValues).forEach(function (keyName) {
                keyValue_1 = keyName;
                if (keyValue_1.startsWith("'")) {
                    keyValue_1 = keyValue_1.substr(1, keyValue_1.length - 2);
                }
            });
            var keyName = this.entityTypeDefinition.keys[0].name;
            outKeys[keyName] = keyValue_1;
        }
        else {
            outKeys = keyValues;
        }
        // Remove non key items only if all keys are provided
        var realKeys = outKeys;
        if (this.entityTypeDefinition.keys.every(function (keyProp) { return outKeys[keyProp.name] !== undefined; })) {
            realKeys = {};
            Object.keys(outKeys).forEach(function (keyName) {
                if (_this.entityTypeDefinition.keys.find(function (keyProp) { return keyProp.name === keyName; })) {
                    realKeys[keyName] = outKeys[keyName];
                }
            });
        }
        return realKeys;
    };
    MockDataEntitySet.prototype.performGET = function (keyValues, asArray, tenantId, dontClone) {
        var _a, _b, _c, _d, _e;
        if (dontClone === void 0) { dontClone = false; }
        var currentMockData = this.getMockData(tenantId);
        if (keyValues && Object.keys(keyValues).length) {
            keyValues = this.prepareKeys(keyValues);
            var data = currentMockData.fetchEntries(keyValues);
            if (!data || (Array.isArray(data) && data.length === 0 && !asArray)) {
                if (!currentMockData.hasEntries()) {
                    return currentMockData.getEmptyObject();
                }
                else {
                    return null;
                }
            }
            if (Array.isArray(data) && !asArray) {
                if (dontClone) {
                    return data[0];
                }
                return lodash_clonedeep_1.default(data[0]);
            }
            if (dontClone) {
                return data;
            }
            return lodash_clonedeep_1.default(data);
        }
        if ((_e = (_d = (_c = (_b = (_a = this.entitySetDefinition) === null || _a === void 0 ? void 0 : _a.entityType) === null || _b === void 0 ? void 0 : _b.annotations) === null || _c === void 0 ? void 0 : _c.Common) === null || _d === void 0 ? void 0 : _d.ResultContext) === null || _e === void 0 ? void 0 : _e.valueOf()) {
            // Parametrized entityset, they cannot be requested directly
            throw new Error(JSON.stringify({ message: 'Parametrized entityset need to be queried with keys' }));
        }
        if (!asArray) {
            return lodash_clonedeep_1.default(currentMockData.getDefaultElement());
        }
        return currentMockData.getAllEntries();
    };
    MockDataEntitySet.prototype.performPOST = function (keyValues, postData, tenantId) {
        // Validate potentially missing keys
        keyValues = this.prepareKeys(keyValues);
        var currentMockData = this.getMockData(tenantId);
        Object.keys(keyValues).forEach(function (key) {
            if (!postData[key]) {
                postData[key] = keyValues[key];
            }
        });
        this.entityTypeDefinition.keys.forEach(function (keyProp) {
            if (postData[keyProp.name] === undefined || postData[keyProp.name].length === 0) {
                // Missing key
                if (keyProp.name === 'IsActiveEntity') {
                    postData['IsActiveEntity'] = false;
                }
                else {
                    postData[keyProp.name] = currentMockData.generateKey(keyProp);
                }
            }
        });
        var newObject = currentMockData.getEmptyObject();
        newObject = Object.assign(newObject, postData);
        currentMockData.addEntry(newObject);
        return newObject;
    };
    MockDataEntitySet.prototype.performPATCH = function (keyValues, patchData, tenantId) {
        keyValues = this.prepareKeys(keyValues);
        var data = this.performGET(keyValues, false, tenantId);
        var currentMockData = this.getMockData(tenantId);
        var updatedData = Object.assign(data, patchData);
        currentMockData.onBeforeUpdateEntry(keyValues, updatedData);
        currentMockData.updateEntry(keyValues, updatedData);
        currentMockData.onAfterUpdateEntry(keyValues, updatedData);
        return updatedData;
    };
    MockDataEntitySet.prototype.performDELETE = function (keyValues, tenantId) {
        return __awaiter(this, void 0, void 0, function () {
            var currentMockData;
            return __generator(this, function (_a) {
                currentMockData = this.getMockData(tenantId);
                keyValues = this.prepareKeys(keyValues);
                currentMockData.removeEntry(keyValues);
                return [2 /*return*/];
            });
        });
    };
    MockDataEntitySet.prototype.executeAction = function (actionDefinition, actionData, odataRequest, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var currentMockData, responseObject;
            return __generator(this, function (_a) {
                currentMockData = this.getMockData(odataRequest.tenantId);
                keys = this.prepareKeys(keys);
                actionData = currentMockData.onBeforeAction(actionDefinition, actionData, keys);
                responseObject = currentMockData.executeAction(actionDefinition, actionData, keys);
                responseObject = currentMockData.onAfterAction(actionDefinition, actionData, keys, responseObject);
                return [2 /*return*/, responseObject];
            });
        });
    };
    return MockDataEntitySet;
}());
exports.MockDataEntitySet = MockDataEntitySet;
//# sourceMappingURL=data:application/json;base64,