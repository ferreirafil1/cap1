import { MockDataEntitySet } from './entitySet';
import { ODataRequest } from '../request/odataRequest';
import { Action, EntitySet, EntityType, Property } from '@sap-ux/annotation-converter';
import { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';
import { DataAccessInterface } from './common';
declare type DraftElement = {
    IsActiveEntity: boolean;
    HasDraftEntity: boolean;
    HasActiveEntity: boolean;
    DraftAdministrativeData: DraftAdministrativeData;
};
declare type DraftAdministrativeData = {
    DraftUUID: string;
    CreationDateTime: string;
    CreatedByUser: string;
    DraftIsCreatedByMe: boolean;
    LastChangeDateTime: string;
    LastChangedByUser: string;
    InProcessByUser: string;
    DraftIsProcessedByMe: boolean;
};
export declare class DraftMockEntitySet extends MockDataEntitySet {
    constructor(rootFolder: string, entitySetDefinition: EntitySet | EntityType, dataAccess: DataAccessInterface, generateMockData: boolean);
    protected checkSpecificProperties(filterExpression: any, mockData: any, allData: FileBasedMockData, forceToLower?: boolean): boolean;
    checkKeyValue(mockData: object, keyValues: object, keyName: string, property?: Property): boolean;
    createInactiveVersion(keyValues: Record<string, string>, tenantId: string): void;
    activateInactiveVersion(keyValues: Record<string, string>, tenantId: string): void;
    draftDiscard(keyValues: Record<string, any>, draftData: object, tenantId: string): Promise<DraftElement>;
    discardInactiveVersion(keyValues: Record<string, string>, tenantId: string): void;
    executeAction(actionDefinition: Action, actionData: object, odataRequest: ODataRequest, keys: Record<string, any>): Promise<any>;
    performPOST(keyValues: KeyDefinitions, postData: any, tenantId: string): any;
    performDELETE(keyValues: KeyDefinitions, tenantId: string): Promise<void>;
}
export {};
