"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAccess = void 0;
var entitySet_1 = require("./entitySet");
var draftEntitySet_1 = require("./draftEntitySet");
var stickyEntitySet_1 = require("./stickyEntitySet");
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
var ContainedDataEntitySet_1 = require("./ContainedDataEntitySet");
var DataAccess = /** @class */ (function () {
    function DataAccess(root, metadata, strictKeyMode, contextBasedIsolation, generateMockData) {
        var _this = this;
        this.entitySets = {};
        this.stickyEntitySets = [];
        this.mockDataRootFolder = root;
        this.metadata = metadata;
        this.strictKeyMode = strictKeyMode;
        this.contextBasedIsolation = contextBasedIsolation;
        this.metadata.getEntitySets().forEach(function (entitySet) {
            _this.getMockEntitySet(entitySet.name, generateMockData);
        });
    }
    DataAccess.prototype.isV4 = function () {
        return this.metadata.getVersion() !== '2.0';
    };
    DataAccess.prototype.getMockEntitySet = function (entityTypeName, generateMockData, containedEntityType, containedData) {
        return __awaiter(this, void 0, void 0, function () {
            var mockEntitySet, entitySet, entityType, mockEntitySet;
            return __generator(this, function (_a) {
                if (containedEntityType) {
                    mockEntitySet = new ContainedDataEntitySet_1.ContainedDataEntitySet(containedEntityType, containedData, this);
                    return [2 /*return*/, mockEntitySet.readyPromise];
                }
                else if (!this.entitySets[entityTypeName]) {
                    entitySet = this.metadata.getEntitySet(entityTypeName);
                    entityType = this.metadata.getEntityType(entityTypeName);
                    mockEntitySet = void 0;
                    if (this.metadata.isDraftEntity(entitySet)) {
                        mockEntitySet = new draftEntitySet_1.DraftMockEntitySet(this.mockDataRootFolder, entitySet || entityType, this, generateMockData);
                    }
                    else if (this.metadata.isStickyEntity(entitySet)) {
                        mockEntitySet = new stickyEntitySet_1.StickyMockEntitySet(this.mockDataRootFolder, entitySet || entityType, this, generateMockData);
                        this.stickyEntitySets.push(mockEntitySet);
                    }
                    else {
                        mockEntitySet = new entitySet_1.MockDataEntitySet(this.mockDataRootFolder, entitySet || entityType, this, generateMockData);
                    }
                    this.entitySets[entityTypeName] = mockEntitySet;
                }
                return [2 /*return*/, this.entitySets[entityTypeName].readyPromise];
            });
        });
    };
    DataAccess.prototype.performAction = function (odataRequest, actionData) {
        return __awaiter(this, void 0, void 0, function () {
            var rootEntitySet, currentEntityType, currentEntitySet, i, _loop_1, entitySetName, actionName, fqActionName, actionDefinition, collecfqActionName, collecactionDefinition, actionName, fqActionName, actionDefinition, targetEntitySet_1, outData, enrichElement_1, fqActionName_1, actionDefinition_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rootEntitySet = this.metadata.getEntitySet(odataRequest.query.queryPath[0].path);
                        if (!rootEntitySet) return [3 /*break*/, 5];
                        currentEntityType = rootEntitySet.entityType;
                        currentEntitySet = rootEntitySet;
                        i = 1;
                        _loop_1 = function () {
                            var queryPart = odataRequest.query.queryPath[i].path;
                            var targetNavProp = currentEntityType.navigationProperties.find(function (navProp) { return navProp.name === queryPart; });
                            if (targetNavProp) {
                                currentEntityType = targetNavProp.targetType;
                                if (currentEntitySet) {
                                    currentEntitySet = currentEntitySet.navigationPropertyBinding[queryPart];
                                }
                            }
                        };
                        for (i = 1; i < odataRequest.query.queryPath.length - 1; i++) {
                            _loop_1();
                        }
                        entitySetName = currentEntitySet ? currentEntitySet.name : currentEntityType.name;
                        actionName = odataRequest.query.queryPath[i] ? odataRequest.query.queryPath[i].path : undefined;
                        if (!(actionName && actionName.length > 0)) return [3 /*break*/, 4];
                        fqActionName = actionName + "(" + currentEntityType.fullyQualifiedName + ")";
                        actionDefinition = this.metadata.getActionByFQN(fqActionName);
                        if (!actionDefinition) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getMockEntitySet(entitySetName)];
                    case 1: return [2 /*return*/, (_a.sent()).executeAction(actionDefinition, actionData, odataRequest, odataRequest.query.queryPath[i - 1].keys)];
                    case 2:
                        collecfqActionName = actionName + "(Collection(" + currentEntityType.fullyQualifiedName + "))";
                        collecactionDefinition = this.metadata.getActionByFQN(collecfqActionName);
                        if (!collecactionDefinition) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getMockEntitySet(entitySetName)];
                    case 3: return [2 /*return*/, (_a.sent()).executeAction(collecactionDefinition, actionData, odataRequest, odataRequest.query.queryPath[0].keys)];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        actionName = odataRequest.query.queryPath[0].path;
                        fqActionName = this.metadata.getEntityContainerPath() + "/" + actionName + "()";
                        actionDefinition = this.metadata.getActionByFQN(fqActionName);
                        if (!(actionDefinition && this.metadata.getEntitySetByType(actionDefinition.sourceType))) return [3 /*break*/, 7];
                        targetEntitySet_1 = this.metadata.getEntitySetByType(actionDefinition.sourceType);
                        return [4 /*yield*/, this.getMockEntitySet(targetEntitySet_1.name)];
                    case 6:
                        outData = (_a.sent()).executeAction(actionDefinition, Object.assign({}, actionData, odataRequest.query.rawParams), odataRequest, odataRequest.query.rawParams);
                        if (this.metadata.getVersion() === '2.0') {
                            enrichElement_1 = function (entitySet, dataLine) {
                                var keyValues = [];
                                entitySet.entityType.keys.forEach(function (key) {
                                    keyValues.push(key.name + "='" + dataLine[key.name] + "'");
                                });
                                var uri = odataRequest.baseUrl + "/" + entitySet.name + "(" + keyValues.join(',') + ")";
                                dataLine['__metadata'] = {
                                    id: uri,
                                    uri: uri,
                                    type: entitySet.entityTypeName
                                };
                                return dataLine;
                            };
                            // Enrich data with __metadata for v2
                            if (Array.isArray(outData)) {
                                outData = outData.map(function (element) {
                                    return enrichElement_1(targetEntitySet_1, element);
                                });
                            }
                            else if (outData != null) {
                                outData = enrichElement_1(targetEntitySet_1, outData);
                            }
                        }
                        return [2 /*return*/, outData];
                    case 7:
                        fqActionName_1 = actionName + "()";
                        actionDefinition_1 = this.metadata.getActionByFQN(fqActionName_1);
                        if (actionDefinition_1) {
                            this.stickyEntitySets.forEach(function (entitySet) {
                                entitySet.executeAction(actionDefinition_1, actionData, odataRequest, odataRequest.query.queryPath[0].keys);
                            });
                            return [2 /*return*/, true];
                        }
                        return [2 /*return*/, null];
                    case 8: return [2 /*return*/, null];
                }
            });
        });
    };
    DataAccess.prototype.getNavigationPropertyKeys = function (data, navPropDetail, currentEntityType, currentKeys, forCreate) {
        if (forCreate === void 0) { forCreate = false; }
        if (navPropDetail.referentialConstraint && navPropDetail.referentialConstraint.length > 0) {
            var dataArray = Array.isArray(data) ? data : [data];
            dataArray.forEach(function (data) {
                navPropDetail.referentialConstraint.forEach(function (refConstr) {
                    currentKeys[refConstr.targetProperty] = data[refConstr.sourceProperty];
                });
            });
        }
        else {
            // Try to find a back link (a nav property going back to the original entityType)
            var originalData_1 = lodash_clonedeep_1.default(data);
            var backNav = navPropDetail.targetType.navigationProperties.find(function (targetNavProp) { return targetNavProp.targetTypeName === currentEntityType.fullyQualifiedName; });
            if (backNav && backNav.referentialConstraint && backNav.referentialConstraint.length > 0) {
                backNav.referentialConstraint.forEach(function (refConstr) {
                    if (originalData_1[refConstr.targetProperty] !== undefined) {
                        currentKeys[refConstr.sourceProperty] = originalData_1[refConstr.targetProperty];
                        delete originalData_1[refConstr.targetProperty];
                    }
                });
                navPropDetail.targetType.keys.forEach(function (propKey) {
                    var _a, _b;
                    if (propKey.name === 'IsActiveEntity' &&
                        currentKeys[propKey.name] === undefined &&
                        Object.hasOwnProperty.call(originalData_1, propKey.name) &&
                        (!forCreate || !((_b = (_a = propKey.annotations) === null || _a === void 0 ? void 0 : _a.Core) === null || _b === void 0 ? void 0 : _b.Computed))) {
                        currentKeys[propKey.name] = originalData_1[propKey.name];
                        delete originalData_1[propKey.name];
                    }
                });
            }
            else if (!this.strictKeyMode) {
                navPropDetail.targetType.keys.forEach(function (propKey) {
                    var _a, _b;
                    if (Object.hasOwnProperty.call(originalData_1, propKey.name) &&
                        (!forCreate || !((_b = (_a = propKey.annotations) === null || _a === void 0 ? void 0 : _a.Core) === null || _b === void 0 ? void 0 : _b.Computed))) {
                        currentKeys[propKey.name] = originalData_1[propKey.name];
                        delete originalData_1[propKey.name];
                    }
                });
                // If there is no key or only draft stuff
                if (Object.keys(currentKeys).length === 0 ||
                    (Object.keys(currentKeys).length === 1 && currentKeys['IsActiveEntity'])) {
                    // If we still don't have anything, try to get the keys from the current entity that are properties in the target
                    currentEntityType.keys.forEach(function (propKey) {
                        if (navPropDetail.targetType.entityProperties.find(function (prop) { return prop.name === propKey.name; }) &&
                            originalData_1[propKey.name] !== undefined) {
                            currentKeys[propKey.name] = originalData_1[propKey.name];
                            delete originalData_1[propKey.name];
                        }
                    });
                }
            }
        }
        return currentKeys;
    };
    DataAccess.prototype.getExpandData = function (currentEntitySet, entityType, expandNavProp, data, requestExpandObject, tenantId, previousEntitySet, visitedPaths) {
        return __awaiter(this, void 0, void 0, function () {
            var navProp, targetEntitySet, navEntitySet, dataArray, _loop_2, this_1, _i, dataArray_1, data_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (data === null) {
                            return [2 /*return*/];
                        }
                        navProp = entityType.navigationProperties.find(function (navProp) { return navProp.name === expandNavProp; });
                        visitedPaths = visitedPaths.concat();
                        visitedPaths.push(expandNavProp);
                        if (navProp && currentEntitySet && currentEntitySet.navigationPropertyBinding[expandNavProp]) {
                            targetEntitySet = currentEntitySet.navigationPropertyBinding[expandNavProp];
                        }
                        else if (previousEntitySet && previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')]) {
                            targetEntitySet = previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')];
                        }
                        if (!targetEntitySet) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getMockEntitySet(targetEntitySet.name)];
                    case 1:
                        navEntitySet = _a.sent();
                        dataArray = Array.isArray(data) ? data : [data];
                        _loop_2 = function (data_1) {
                            var currentKeys, expandData_1, expandDetail_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        currentKeys = this_1.getNavigationPropertyKeys(data_1, navProp, entityType, {});
                                        if (!!navProp.containsTarget) return [3 /*break*/, 2];
                                        expandData_1 = navEntitySet.performGET(currentKeys, navProp.isCollection, tenantId);
                                        data_1[expandNavProp] = expandData_1;
                                        expandDetail_1 = requestExpandObject.expand[expandNavProp];
                                        if (!(expandDetail_1.expand && Object.keys(expandDetail_1.expand).length > 0)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, Promise.all(Object.keys(expandDetail_1.expand).map(function (subExpandNavProp) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    return [2 /*return*/, this.getExpandData(targetEntitySet, navProp.targetType, subExpandNavProp, expandData_1, expandDetail_1, tenantId, targetEntitySet, [])];
                                                });
                                            }); }))];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, dataArray_1 = dataArray;
                        _a.label = 2;
                    case 2:
                        if (!(_i < dataArray_1.length)) return [3 /*break*/, 5];
                        data_1 = dataArray_1[_i];
                        return [5 /*yield**/, _loop_2(data_1)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    DataAccess.prototype.getData = function (odataRequest) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return __awaiter(this, void 0, void 0, function () {
            var currentEntitySet, previousEntitySet, currentEntityType, visitedPaths, targetContainedData, targetContainedEntityType, rootEntitySet, isCount, data, potentialTarget, filterDef_1, mockEntitySet_1, mockEntitySet_2, dataByGroup_1, mockEntitySet, mockData_1, getAggregateKey_1, originalData_2, queryPropsKeys_1, compareByKey_1, enrichElement_2;
            var _this = this;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        currentEntitySet = null;
                        previousEntitySet = null;
                        currentEntityType = null;
                        visitedPaths = [];
                        targetContainedEntityType = null;
                        rootEntitySet = this.metadata.getEntitySet(odataRequest.query.queryPath[0].path);
                        isCount = false;
                        return [4 /*yield*/, odataRequest.query.queryPath.reduce(function (data, queryPathPart, index) { return __awaiter(_this, void 0, void 0, function () {
                                var currentKeys, asArray, navPropDetail, navPropDetail;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, data];
                                        case 1:
                                            data = _a.sent();
                                            currentKeys = queryPathPart.keys || {};
                                            asArray = Object.keys(currentKeys).length === 0;
                                            if (queryPathPart.path === '$count') {
                                                isCount = true;
                                                return [2 /*return*/, data];
                                            }
                                            if ((!currentEntityType || data === null) && index > 0) {
                                                if (data === null) {
                                                    if (currentEntityType) {
                                                        navPropDetail = currentEntityType.navigationProperties.find(function (navProp) { return navProp.name === queryPathPart.path; });
                                                        asArray = asArray && navPropDetail.isCollection;
                                                    }
                                                    return [2 /*return*/, asArray ? [] : null];
                                                }
                                                return [2 /*return*/, data];
                                            }
                                            if (!currentEntityType) {
                                                // First level if entity set, then it's navigation properties
                                                currentEntitySet = this.metadata.getEntitySet(queryPathPart.path);
                                                previousEntitySet = currentEntitySet;
                                                currentEntityType = currentEntitySet.entityType;
                                            }
                                            else {
                                                navPropDetail = currentEntityType.navigationProperties.find(function (navProp) { return navProp.name === queryPathPart.path; });
                                                if (navPropDetail.name === 'SiblingEntity' && currentEntityType) {
                                                    asArray = asArray && navPropDetail.isCollection;
                                                    currentKeys.IsActiveEntity = !data.IsActiveEntity;
                                                }
                                                else {
                                                    visitedPaths.push(queryPathPart.path);
                                                    if (navPropDetail) {
                                                        if (asArray) {
                                                            currentKeys = this.getNavigationPropertyKeys(data, navPropDetail, currentEntityType, currentKeys);
                                                        }
                                                        if (!navPropDetail.containsTarget && previousEntitySet) {
                                                            currentEntitySet = previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')];
                                                            previousEntitySet = currentEntitySet;
                                                            visitedPaths = [];
                                                            currentEntityType = currentEntitySet.entityType;
                                                            targetContainedEntityType = null;
                                                            targetContainedData = null;
                                                        }
                                                        else {
                                                            targetContainedEntityType = navPropDetail.targetType;
                                                            targetContainedData = data[queryPathPart.path];
                                                            currentEntitySet = null;
                                                            currentEntityType = targetContainedEntityType;
                                                        }
                                                    }
                                                    else {
                                                        currentEntitySet = null;
                                                        currentEntityType = null;
                                                    }
                                                    asArray = asArray && navPropDetail.isCollection;
                                                }
                                            }
                                            if (!currentEntitySet && !targetContainedEntityType) {
                                                if (Array.isArray(data)) {
                                                    return [2 /*return*/, asArray ? [] : null];
                                                }
                                                else {
                                                    return [2 /*return*/, data[queryPathPart.path]];
                                                }
                                            }
                                            return [4 /*yield*/, this.getMockEntitySet(currentEntitySet === null || currentEntitySet === void 0 ? void 0 : currentEntitySet.name, undefined, targetContainedEntityType, targetContainedData)];
                                        case 2: return [2 /*return*/, (_a.sent()).performGET(currentKeys, asArray, odataRequest.tenantId)];
                                    }
                                });
                            }); }, {})];
                    case 1:
                        data = _m.sent();
                        if (((_d = (_c = (_b = (_a = rootEntitySet.entityType) === null || _a === void 0 ? void 0 : _a.annotations) === null || _b === void 0 ? void 0 : _b.Common) === null || _c === void 0 ? void 0 : _c.ResultContext) === null || _d === void 0 ? void 0 : _d.valueOf()) &&
                            odataRequest.query.queryPath.length === 1) {
                            potentialTarget = rootEntitySet.entityType.navigationProperties.find(function (navProp) { return navProp.containsTarget; });
                            throw new Error(JSON.stringify({
                                message: 'Parametrized entityset cannot be queried directly, you need to load the result set, most likely "' +
                                    potentialTarget.name +
                                    '" in this case'
                            }));
                        }
                        if (!(data !== null || (Array.isArray(data) && data.length > 0))) return [3 /*break*/, 12];
                        if (!odataRequest.query.expand) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.all(Object.keys(odataRequest.query.expand).map(function (expandNavProp) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, this.getExpandData(currentEntitySet, currentEntityType, expandNavProp, data, odataRequest.query, odataRequest.tenantId, previousEntitySet, visitedPaths)];
                                });
                            }); }))];
                    case 2:
                        _m.sent();
                        _m.label = 3;
                    case 3:
                        if (!((odataRequest.query.filter || ((_f = (_e = odataRequest.query) === null || _e === void 0 ? void 0 : _e.aggregateDefinition) === null || _f === void 0 ? void 0 : _f.filter)) && Array.isArray(data))) return [3 /*break*/, 5];
                        filterDef_1 = odataRequest.query.filter || ((_h = (_g = odataRequest.query) === null || _g === void 0 ? void 0 : _g.aggregateDefinition) === null || _h === void 0 ? void 0 : _h.filter);
                        return [4 /*yield*/, this.getMockEntitySet(currentEntitySet ? currentEntitySet.name : currentEntityType.name)];
                    case 4:
                        mockEntitySet_1 = _m.sent();
                        data = data.filter(function (dataLine) {
                            return mockEntitySet_1.checkFilter(dataLine, filterDef_1, odataRequest.tenantId);
                        });
                        _m.label = 5;
                    case 5:
                        if (!(odataRequest.query.searchQuery && Array.isArray(data))) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getMockEntitySet(currentEntityType.name)];
                    case 6:
                        mockEntitySet_2 = _m.sent();
                        data = data.filter(function (dataLine) {
                            return mockEntitySet_2.checkSearch(dataLine, odataRequest.query.searchQuery);
                        });
                        _m.label = 7;
                    case 7:
                        if (!odataRequest.query.aggregateDefinition) return [3 /*break*/, 11];
                        dataByGroup_1 = {};
                        return [4 /*yield*/, this.getMockEntitySet(currentEntityType.name)];
                    case 8:
                        mockEntitySet = _m.sent();
                        if (!mockEntitySet) return [3 /*break*/, 10];
                        return [4 /*yield*/, mockEntitySet.getMockData(odataRequest.tenantId)];
                    case 9:
                        mockData_1 = _m.sent();
                        _m.label = 10;
                    case 10:
                        getAggregateKey_1 = function (dataLine) {
                            return odataRequest.query.aggregateDefinition.groupBy.reduce(function (key, groupByProp) {
                                if (key.length > 0) {
                                    key += ',';
                                }
                                key += dataLine[groupByProp];
                                return key;
                            }, '');
                        };
                        data.forEach(function (dataLine) {
                            var aggregateKey = getAggregateKey_1(dataLine);
                            if (!dataByGroup_1[aggregateKey]) {
                                dataByGroup_1[aggregateKey] = [];
                            }
                            dataByGroup_1[aggregateKey].push(dataLine);
                        });
                        data = Object.keys(dataByGroup_1).map(function (groupName) {
                            var dataToAggregate = dataByGroup_1[groupName];
                            var outData = {};
                            odataRequest.query.aggregateDefinition.groupBy.forEach(function (propName) {
                                outData[propName] = dataToAggregate[0][propName];
                            });
                            odataRequest.query.aggregateDefinition.aggregates.forEach(function (aggregateDefinition) {
                                var propValue = undefined;
                                if (aggregateDefinition.operator === undefined &&
                                    mockData_1 &&
                                    mockData_1.hasCustomAggregate(aggregateDefinition.name)) {
                                    propValue = mockData_1.performCustomAggregate(aggregateDefinition.name, dataToAggregate);
                                }
                                else {
                                    dataToAggregate.forEach(function (dataLine) {
                                        var currentValue = dataLine[aggregateDefinition.sourceProperty];
                                        if (propValue === undefined) {
                                            propValue = currentValue;
                                        }
                                        else {
                                            switch (aggregateDefinition.operator) {
                                                case 'max':
                                                    propValue = Math.max(propValue, currentValue);
                                                    break;
                                                case 'min':
                                                    propValue = Math.min(propValue, currentValue);
                                                    break;
                                                case 'average':
                                                    propValue += currentValue;
                                                    break;
                                                default:
                                                    propValue += currentValue;
                                                    break;
                                            }
                                        }
                                    });
                                }
                                if (aggregateDefinition.operator === 'average') {
                                    propValue = propValue / dataToAggregate.length;
                                }
                                outData[aggregateDefinition.name] = propValue;
                            });
                            return outData;
                        });
                        _m.label = 11;
                    case 11:
                        originalData_2 = lodash_clonedeep_1.default(data);
                        if ((_j = odataRequest === null || odataRequest === void 0 ? void 0 : odataRequest.query) === null || _j === void 0 ? void 0 : _j.properties) {
                            if (odataRequest.query.properties['DraftAdministrativeData']) {
                                if (Array.isArray(data)) {
                                    data = data.map(function (element) {
                                        if (!element.DraftAdministrativeData) {
                                            element.DraftAdministrativeData = null;
                                        }
                                        return element;
                                    });
                                }
                                else if (data != null && data.constructor.name === 'Object') {
                                    if (!data.DraftAdministrativeData) {
                                        data.DraftAdministrativeData = null;
                                    }
                                }
                            }
                        }
                        if (((_k = odataRequest === null || odataRequest === void 0 ? void 0 : odataRequest.query) === null || _k === void 0 ? void 0 : _k.properties) && Object.keys((_l = odataRequest === null || odataRequest === void 0 ? void 0 : odataRequest.query) === null || _l === void 0 ? void 0 : _l.properties).length > 0) {
                            queryPropsKeys_1 = Object.keys(odataRequest.query.properties);
                            compareByKey_1 = function (element) {
                                var elemKeys = Object.keys(element);
                                var differenceKeys = elemKeys.filter(function (x) { return !queryPropsKeys_1.includes(x); });
                                differenceKeys.forEach(function (k) {
                                    delete element[k];
                                });
                                if (odataRequest.query.expand) {
                                    var expandKeys = Object.keys(odataRequest.query.expand);
                                    expandKeys.forEach(function (expandKey) {
                                        var expandElem = element[expandKey];
                                        if (expandElem) {
                                            if (odataRequest.query.expand[expandKey].select) {
                                                var expandSelectKeys_1 = Object.keys(odataRequest.query.expand[expandKey].select);
                                                if (Array.isArray(expandElem)) {
                                                    expandElem.forEach(function (expandItem) {
                                                        var expandElemKeys = Object.keys(expandItem);
                                                        var differenceKeys = expandElemKeys.filter(function (x) { return !expandSelectKeys_1.includes(x); });
                                                        differenceKeys.forEach(function (k) {
                                                            delete expandItem[k];
                                                        });
                                                    });
                                                }
                                                else {
                                                    var expandElemKeys = Object.keys(expandElem);
                                                    var differenceKeys_1 = expandElemKeys.filter(function (x) { return !expandSelectKeys_1.includes(x); });
                                                    differenceKeys_1.forEach(function (k) {
                                                        delete expandElem[k];
                                                    });
                                                }
                                            }
                                        }
                                    });
                                }
                                return element;
                            };
                            if (Array.isArray(data)) {
                                data = data.map(function (element) {
                                    return compareByKey_1(element);
                                });
                            }
                            else if (data != null && data.constructor.name === 'Object') {
                                data = compareByKey_1(data);
                            }
                        }
                        odataRequest.dataLength = (Array.isArray(data) && data.length) || 1;
                        // Apply $skip / $top
                        if (Array.isArray(data) && odataRequest.query.startIndex !== undefined && odataRequest.query.maxElements) {
                            data = data.slice(odataRequest.query.startIndex, odataRequest.query.startIndex + odataRequest.query.maxElements);
                        }
                        if (this.metadata.getVersion() === '2.0') {
                            enrichElement_2 = function (entitySet, dataLine, originalDataLine) {
                                var keyValues = [];
                                entitySet.entityType.keys.forEach(function (key) {
                                    keyValues.push(key.name + "='" + (dataLine[key.name] || originalDataLine[key.name]) + "'");
                                });
                                var uri = odataRequest.baseUrl + "/" + entitySet.name + "(" + keyValues.join(',') + ")";
                                dataLine['__metadata'] = {
                                    id: uri,
                                    uri: uri,
                                    type: entitySet.entityTypeName
                                };
                                entitySet.entityType.navigationProperties.forEach(function (navProp) {
                                    //eslint-disable-next-line
                                    if (dataLine.hasOwnProperty(navProp.name)) {
                                        if (entitySet.navigationPropertyBinding[navProp.name]) {
                                            if (navProp.isCollection) {
                                                dataLine[navProp.name] = {
                                                    results: dataLine[navProp.name].map(function (element, idx) {
                                                        return enrichElement_2(entitySet.navigationPropertyBinding[navProp.name], element, originalDataLine[navProp.name][idx]);
                                                    })
                                                };
                                            }
                                            else if (dataLine[navProp.name] !== null) {
                                                dataLine[navProp.name] = enrichElement_2(entitySet.navigationPropertyBinding[navProp.name], dataLine[navProp.name], originalDataLine[navProp.name]);
                                            }
                                        }
                                    }
                                });
                                return dataLine;
                            };
                            // Enrich data with __metadata for v2
                            if (Array.isArray(data)) {
                                data = data.map(function (element, idx) {
                                    return enrichElement_2(currentEntitySet, element, originalData_2[idx]);
                                });
                            }
                            else if (data != null) {
                                data = enrichElement_2(currentEntitySet, data, originalData_2);
                            }
                        }
                        if (isCount) {
                            data = odataRequest.dataLength;
                        }
                        _m.label = 12;
                    case 12: return [2 /*return*/, data];
                }
            });
        });
    };
    DataAccess.prototype.updateData = function (odataRequest, patchData) {
        return __awaiter(this, void 0, void 0, function () {
            var entitySetName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entitySetName = odataRequest.query.queryPath[0].path;
                        return [4 /*yield*/, this.getMockEntitySet(entitySetName)];
                    case 1: return [2 /*return*/, (_a.sent()).performPATCH(odataRequest.query.queryPath[0].keys, patchData, odataRequest.tenantId)];
                }
            });
        });
    };
    DataAccess.prototype.createData = function (odataRequest, postData) {
        return __awaiter(this, void 0, void 0, function () {
            var entitySetName, navPropertyName, entitySet, entityType, navPropDetail, navPropEntityType, data, providedKeys_1, currentKeys_1, targetEntitySet, currentKeys_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entitySetName = odataRequest.query.queryPath[0].path;
                        navPropertyName = odataRequest.query.queryPath.length > 1 ? odataRequest.query.queryPath[1].path : undefined;
                        entitySet = this.metadata.getEntitySet(entitySetName);
                        if (!navPropertyName) return [3 /*break*/, 5];
                        entityType = entitySet.entityType;
                        navPropDetail = entityType.navigationProperties.find(function (navProp) { return navProp.name === navPropertyName; });
                        navPropEntityType = navPropDetail.targetType;
                        return [4 /*yield*/, this.getMockEntitySet(entitySetName)];
                    case 1:
                        data = (_a.sent()).performGET(odataRequest.query.queryPath[0].keys, false, odataRequest.tenantId);
                        if (!data[navPropertyName]) {
                            data[navPropertyName] = [];
                        }
                        providedKeys_1 = {};
                        navPropEntityType.keys.forEach(function (key) {
                            if (postData[key.name] !== undefined) {
                                providedKeys_1[key.name] = postData[key.name];
                            }
                        });
                        currentKeys_1 = this.getNavigationPropertyKeys(data, navPropDetail, entitySet.entityType, providedKeys_1, true);
                        if (!!navPropDetail.containsTarget) return [3 /*break*/, 3];
                        targetEntitySet = entitySet.navigationPropertyBinding[navPropertyName];
                        odataRequest.context = "../$metadata#" + targetEntitySet.name + "/$entity";
                        odataRequest.location = targetEntitySet.name + "(" + Object.keys(currentKeys_1)
                            .map(function (key) { return key + "='" + currentKeys_1[key] + "'"; })
                            .join(',') + ")";
                        return [4 /*yield*/, this.getMockEntitySet(targetEntitySet.name)];
                    case 2:
                        (_a.sent()).performPOST(currentKeys_1, postData, odataRequest.tenantId);
                        return [3 /*break*/, 4];
                    case 3:
                        data[navPropertyName].push(postData);
                        _a.label = 4;
                    case 4: return [2 /*return*/, postData];
                    case 5:
                        currentKeys_2 = {};
                        entitySet.entityType.keys.forEach(function (key) {
                            if (postData[key.name] !== undefined) {
                                currentKeys_2[key.name] = postData[key.name];
                            }
                        });
                        return [4 /*yield*/, this.getMockEntitySet(entitySet.name)];
                    case 6:
                        (_a.sent()).performPOST(currentKeys_2, postData, odataRequest.tenantId);
                        odataRequest.context = "../$metadata#" + entitySet.name + "/$entity";
                        odataRequest.location = entitySet.name + "(" + Object.keys(currentKeys_2)
                            .map(function (key) { return key + "='" + currentKeys_2[key] + "'"; })
                            .join(',') + ")";
                        return [2 /*return*/, postData];
                }
            });
        });
    };
    DataAccess.prototype.deleteData = function (odataRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var entitySetName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entitySetName = odataRequest.query.queryPath[0].path;
                        return [4 /*yield*/, this.getMockEntitySet(entitySetName)];
                    case 1: return [2 /*return*/, (_a.sent()).performDELETE(odataRequest.query.queryPath[0].keys, odataRequest.tenantId)];
                }
            });
        });
    };
    DataAccess.prototype.resetStickySessionTimeout = function (res, tenantId) {
        res.header('odata-version', '4.0');
        var UUID = '';
        var timeoutTime = 20;
        this.stickyEntitySets.forEach(function (entitySet) {
            UUID = entitySet.resetSessionTimeout(tenantId);
            timeoutTime = entitySet.sessionTimeoutTime;
        });
        res.header('sap-contextid', UUID);
        res.header('sap-http-session-timeout', timeoutTime.toString());
        res.status(200);
        res.end();
    };
    return DataAccess;
}());
exports.DataAccess = DataAccess;
//# sourceMappingURL=data:application/json;base64,