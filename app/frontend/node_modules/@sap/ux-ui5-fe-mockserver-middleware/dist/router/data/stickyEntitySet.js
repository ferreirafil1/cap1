"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickyMockEntitySet = void 0;
var entitySet_1 = require("./entitySet");
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
var id_1 = require("./id");
var StickyMockEntitySet = /** @class */ (function (_super) {
    __extends(StickyMockEntitySet, _super);
    function StickyMockEntitySet(rootFolder, entitySetDefinition, dataAccess, generateMockData) {
        var _this = _super.call(this, rootFolder, entitySetDefinition, dataAccess, generateMockData) || this;
        _this._currentSessionObject = {};
        _this.sessionTimeoutTime = 120;
        return _this;
    }
    StickyMockEntitySet.prototype.getSessionObject = function (tenantId) {
        return this._currentSessionObject[tenantId];
    };
    StickyMockEntitySet.prototype.setSessionObject = function (tenantId, objectData) {
        this._currentSessionObject[tenantId] = objectData;
    };
    StickyMockEntitySet.prototype.resetSessionTimeout = function (tenantId) {
        var _this = this;
        clearTimeout(this.sessionTimeoutRef);
        this.sessionTimeoutRef = setTimeout(function () {
            _this.currentUUID = null;
            _this.setSessionObject(tenantId, null);
        }, this.sessionTimeoutTime * 1000);
        return this.currentUUID;
    };
    StickyMockEntitySet.prototype.performPATCH = function (keyValues, patchData, tenantId) {
        keyValues = this.prepareKeys(keyValues);
        var data = this.performGET(keyValues, false, tenantId);
        var currentMockData = this.getMockData(tenantId);
        var updatedData = Object.assign(data, patchData);
        currentMockData.onBeforeUpdateEntry(keyValues, updatedData);
        if (updatedData.__transient) {
            this.setSessionObject(tenantId, updatedData);
        }
        else {
            currentMockData.updateEntry(keyValues, updatedData);
        }
        currentMockData.onAfterUpdateEntry(keyValues, updatedData);
        return updatedData;
    };
    StickyMockEntitySet.prototype.executeAction = function (actionDefinition, actionData, odataRequest, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var currentMockData, responseObject, data, duplicate, newObject_1, nonNullableProperties, uuid, newData;
            return __generator(this, function (_a) {
                currentMockData = this.getMockData(odataRequest.tenantId);
                keys = this.prepareKeys(keys);
                actionData = currentMockData.onBeforeAction(actionDefinition, actionData, keys);
                switch (actionDefinition.fullyQualifiedName) {
                    // Draft Edit Action
                    case this.entitySetDefinition.annotations.Session.StickySessionSupported.EditAction + "(" + actionDefinition.sourceType + ")": {
                        data = this.performGET(keys, false, odataRequest.tenantId);
                        duplicate = Object.assign({}, data);
                        this.setSessionObject(odataRequest.tenantId, duplicate);
                        duplicate.__transient = true;
                        duplicate.__keys = keys;
                        responseObject = duplicate;
                        break;
                    }
                    case this.entitySetDefinition.annotations.Session.StickySessionSupported.NewAction + "(" + actionDefinition.sourceType + ")": {
                        newObject_1 = Object.assign({}, actionData);
                        nonNullableProperties = actionDefinition.returnEntityType.entityProperties.filter(function (prop) { return prop.nullable === false; });
                        nonNullableProperties.forEach(function (nonNullableProperty) {
                            if (newObject_1[nonNullableProperty.name] === undefined) {
                                if (Object.prototype.hasOwnProperty.call(nonNullableProperty, 'defaultValue')) {
                                    newObject_1[nonNullableProperty.name] = nonNullableProperty.defaultValue;
                                }
                                else {
                                    switch (nonNullableProperty.type) {
                                        case 'Edm.String':
                                            newObject_1[nonNullableProperty.name] = '';
                                            break;
                                        case 'Edm.Guid':
                                            newObject_1[nonNullableProperty.name] = '';
                                            break;
                                    }
                                }
                            }
                        });
                        this.setSessionObject(odataRequest.tenantId, newObject_1);
                        newObject_1.__transient = true;
                        odataRequest.context = "../$metadata#" + this.entitySetDefinition.name + "()/$entity";
                        uuid = id_1.generateId(16);
                        this.currentUUID = uuid;
                        odataRequest.setResponseHeader('sap-contextid', 'SID:ANON:localMock' + uuid);
                        odataRequest.setResponseHeader('sap-http-session-timeout', this.sessionTimeoutTime);
                        this.resetSessionTimeout(odataRequest.tenantId);
                        responseObject = newObject_1;
                        break;
                    }
                    case this.entitySetDefinition.annotations.Session.StickySessionSupported.DiscardAction + "(" + actionDefinition.sourceType + ")":
                        // Discard
                        this.setSessionObject(odataRequest.tenantId, null);
                        responseObject = null;
                        break;
                    case this.entitySetDefinition.annotations.Session.StickySessionSupported.SaveAction + "(" + actionDefinition.sourceType + ")": {
                        newData = this.getSessionObject(odataRequest.tenantId);
                        if (newData.__keys) {
                            // Key needs to be filled now
                            currentMockData.updateEntry(newData.__keys, newData);
                        }
                        else {
                            this.performPOST({}, newData, odataRequest.tenantId);
                        }
                        this.setSessionObject(odataRequest.tenantId, null);
                        responseObject = newData;
                        break;
                    }
                }
                responseObject = currentMockData.onAfterAction(actionDefinition, actionData, keys, responseObject);
                return [2 /*return*/, responseObject];
            });
        });
    };
    StickyMockEntitySet.prototype.performGET = function (keyValues, asArray, tenantId, dontClone) {
        if (dontClone === void 0) { dontClone = false; }
        var currentSessionObject = this.getSessionObject(tenantId);
        if (currentSessionObject && keyValues && Object.keys(keyValues).length) {
            if ((Object.prototype.hasOwnProperty.call(keyValues, "''") && keyValues["''"] === undefined) ||
                this.checkKeys(keyValues, currentSessionObject, this.entityTypeDefinition.keys)) {
                // odataRequest.setResponseHeader('sap-contextid', this.currentUUID);
                // odataRequest.setResponseHeader('sap-http-session-timeout', this.sessionTimeoutTime.toString());
                this.resetSessionTimeout(tenantId);
                return lodash_clonedeep_1.default(currentSessionObject);
            }
        }
        return _super.prototype.performGET.call(this, keyValues, asArray, tenantId);
    };
    return StickyMockEntitySet;
}(entitySet_1.MockDataEntitySet));
exports.StickyMockEntitySet = StickyMockEntitySet;
//# sourceMappingURL=data:application/json;base64,