import { EntityType, Property } from '@sap-ux/annotation-converter';
import { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';
import { Action } from '@sap-ux/vocabularies-types';
import { EntitySetInterface } from './common';
export declare type MockDataContributor = {
    getInitialDataSet?: (contextId: string) => object[];
    addEntry?: (mockEntry: object) => void;
    updateEntry?: (keyValues: KeyDefinitions, newData: object) => void;
    removeEntry?: (keyValues: KeyDefinitions) => void;
    hasEntry?: (keyValues: KeyDefinitions) => boolean;
    hasEntries?: () => boolean;
    fetchEntries?: (keyValues: KeyDefinitions) => object[];
    getAllEntries?: () => object[];
    getEmptyObject?: () => object;
    getDefaultElement?: () => object;
    generateKey?: (property: Property) => any;
    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any;
    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    hasCustomAggregate(customAggregateName: string): boolean;
    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any;
    throwError(message: string, statusCode?: number, messageData?: object): any;
    base: any;
};
export declare class FunctionBasedMockData extends FileBasedMockData {
    private _mockDataFn;
    constructor(mockDataFn: MockDataContributor, entityType: EntityType, mockDataEntitySet: EntitySetInterface, contextId: string);
    addEntry(mockEntry: any): void;
    updateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    removeEntry(keyValues: KeyDefinitions): void;
    fetchEntries(keyValues: KeyDefinitions): object[];
    hasEntry(keyValues: KeyDefinitions): boolean;
    hasEntries(): boolean;
    getEmptyObject(): object;
    getDefaultElement(): object;
    generateKey(property: Property, lineIndex: number): any;
    getAllEntries(): object[];
    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;
    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any;
    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    hasCustomAggregate(customAggregateName: string): boolean;
    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any;
}
