"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataV4Request = void 0;
var odataRequest_1 = require("./odataRequest");
var simpleHttpResponse_1 = require("../batch/http/simpleHttpResponse");
var query_string_1 = require("query-string");
var balanced_match_1 = __importDefault(require("balanced-match"));
var ODataV4Request = /** @class */ (function (_super) {
    __extends(ODataV4Request, _super);
    function ODataV4Request(baseUrl, url, metadata) {
        var _this = _super.call(this, baseUrl, url, metadata) || this;
        _this.context = url.split('?')[0];
        return _this;
    }
    ODataV4Request.prototype.countCharInString = function (testStr, char) {
        var charCount = 0;
        for (var i = 0; i < testStr.length; i++) {
            if (testStr[i] === char) {
                charCount++;
            }
        }
        return charCount;
    };
    /**
     * Comma separate list of properties that can contain sub-requests are split into an array.
     * @param propertiesQuery OData properties request
     */
    ODataV4Request.prototype.splitProperties = function (propertiesQuery) {
        var properties = [];
        var property = '', nestingDepth = 0;
        for (var _i = 0, propertiesQuery_1 = propertiesQuery; _i < propertiesQuery_1.length; _i++) {
            var char = propertiesQuery_1[_i];
            if (char === ',' && nestingDepth === 0) {
                // top-level delimiter - end of property
                if (property.length > 0)
                    properties.push(property);
                property = '';
            }
            else {
                property += char;
                if (char === '(')
                    nestingDepth++;
                if (char === ')')
                    nestingDepth--;
            }
        }
        if (nestingDepth === 0) {
            if (property.length > 0)
                properties.push(property);
        }
        else {
            throw "Invalid properties: " + propertiesQuery;
        }
        return properties;
    };
    ODataV4Request.prototype.parseExpand = function (expandParameters) {
        var _this = this;
        var props = this.splitProperties(expandParameters);
        return props.reduce(function (reducer, property) {
            var match = property.match(/([^(]*)(\((.+)\))?/);
            var name = match[1];
            var parameters = match[3];
            var parameterSplit = parameters === null || parameters === void 0 ? void 0 : parameters.split(';');
            var queryPart = {};
            var previousParamData = '';
            parameterSplit === null || parameterSplit === void 0 ? void 0 : parameterSplit.forEach(function (paramData) {
                if (previousParamData.length > 0) {
                    previousParamData += ';';
                }
                previousParamData += paramData;
                if (previousParamData.indexOf('(') !== -1) {
                    // In case we have an opening parenthesis we may not be balanced
                    var isBalanced = balanced_match_1.default('(', ')', previousParamData);
                    if (isBalanced) {
                        queryPart = Object.assign(queryPart, query_string_1.parse(previousParamData));
                        previousParamData = '';
                    }
                }
                else {
                    queryPart = Object.assign(queryPart, query_string_1.parse(paramData));
                    previousParamData = '';
                }
            });
            var expand = queryPart['$expand']
                ? _this.parseExpand(queryPart['$expand'])
                : { expand: {}, properties: {} };
            var select = queryPart['$select'] ? queryPart['$select'].split(',') : [];
            var selectProperties = {};
            select.forEach(function (propName) {
                selectProperties[propName] = true;
            });
            Object.keys(expand.properties).forEach(function (expandName) {
                selectProperties[expandName] = true;
            });
            reducer.expand[name] = {
                expand: expand.expand,
                select: selectProperties
            };
            reducer.properties[name] = true;
            return reducer;
        }, { expand: {}, properties: {} });
    };
    ODataV4Request.prototype.enrichElement = function (entity, element) {
        // nothing to do in v4
    };
    ODataV4Request.prototype.createResponse = function (data, bCreated, key) {
        if (bCreated === void 0) { bCreated = false; }
        if (key === void 0) { key = undefined; }
        var response = new simpleHttpResponse_1.SimpleResponse();
        if (data !== null) {
            response.write(this.toJSON(data));
            response.status(bCreated ? 204 : 200);
        }
        else {
            response.status(404);
        }
        response.setHeader('content-type', 'application/json;odata.metadata=minimal;IEEE754Compatible=true');
        response.setHeader('odata-version', '4.0');
        if (bCreated) {
            response.setHeader('location', this.location);
        }
        return response;
    };
    ODataV4Request.prototype.toJSON = function (data) {
        /*
        $select=ID,IsActiveEntity,category_ID,currency_code,identifier,price,rating,stock,thumbnailImage,title
        $expand=DraftAdministrativeData,category($select=ID,name),supplier($select=ID,city,name,phone,postCode,street)

        */
        // Header sap-contextid: SID:ANON:ldcicf6_CF6_00:PfxM66KUqPqnTLsyxAgp1J2aQJHbISjdfAQTi6e_-ATT
        // TODO: generate context based on this.uri
        //'@odata.context': `$metadata#${this.uri.entitySet}(${this.uri.query['$select']},${this.uri.query['$expand']})`
        var outContext = this.context;
        var dataLength = this.dataLength;
        if (outContext.indexOf('$metadata') === -1) {
            outContext = "$metadata#" + this.context;
        }
        if (Array.isArray(data)) {
            var result = {
                '@odata.context': "" + outContext,
                '@odata.count': dataLength,
                value: data
            };
            return JSON.stringify(result);
        }
        else {
            var result = {
                '@odata.context': "" + outContext,
                '@odata.metadataEtag': 'W/"2DWIhBAR9jvPhquo53N+7tW+t3A5axeT11Xw3lkjcRY="'
            };
            return JSON.stringify(Object.assign(result, data));
        }
    };
    return ODataV4Request;
}(odataRequest_1.ODataRequest));
exports.ODataV4Request = ODataV4Request;
//# sourceMappingURL=data:application/json;base64,