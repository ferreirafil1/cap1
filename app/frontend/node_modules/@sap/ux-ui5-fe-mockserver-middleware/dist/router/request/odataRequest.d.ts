import { ODataMetadata } from '../data/metadata';
import { SimpleResponse } from '../batch/http/simpleHttpResponse';
import { Response } from 'express';
import { ExecutionError, ODataRequestInterface } from '../data/common';
export interface DataQuery {
    list: boolean;
    queryPath: QueryPath[];
    rawParams: object;
    properties: object;
    searchQuery: string;
    expand: object;
    format: string;
    aggregateDefinition: AggregateDefinition;
    filter: any;
    startIndex?: number;
    maxElements?: number;
}
declare type AggregateDefinition = {
    filter: any;
    groupBy: string[];
    aggregates: AggregateProperty[];
};
declare type AggregateProperty = {
    name: string;
    operator: string;
    sourceProperty: string;
};
export declare type QueryPath = {
    path: string;
    keys: Record<string, any>;
};
export declare type ErrorInformation = {
    statusCode: number;
    message?: string;
    data?: object;
};
/**
 * Abstract class representing an OData request
 */
export declare abstract class ODataRequest implements ODataRequestInterface {
    query: DataQuery;
    readonly baseUrl: string;
    readonly tenantId: string;
    dataLength: number;
    protected metadata: ODataMetadata;
    protected headers: any;
    constructor(baseUrl: string, url: string, metadata: ODataMetadata);
    setResponseHeader(headerName: string, headerValue: any): void;
    applyResponseHeaders(res: Response): void;
    private parsePath;
    /**
     * Version specific parsing of the input url
     * @param path: url path
     * @param params: query parameters as object
     */
    protected parseUrl(path: string, params: object): DataQuery;
    protected parseFilter(filterParams: string): any;
    protected abstract parseExpand(expandParameters: string): Partial<DataQuery>;
    protected parseApply(applyParameters: string): AggregateDefinition;
    protected parseAggregateDefinition(aggregationDefinition: string): AggregateProperty[];
    protected abstract toJSON(data: object | object[]): string;
    protected enrichElement(entity: string, element: object): void;
    createErrorResponse(errorInformation: ExecutionError): SimpleResponse;
    createResponse(data: any, bCreated?: boolean, key?: string): SimpleResponse;
}
export {};
