"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataRequest = void 0;
var querystring_1 = require("querystring");
var simpleHttpResponse_1 = require("../batch/http/simpleHttpResponse");
/**
 * Abstract class representing an OData request
 */
var ODataRequest = /** @class */ (function () {
    function ODataRequest(baseUrl, url, metadata) {
        this.headers = {};
        this.metadata = metadata;
        var _a = url.split('?'), path = _a[0], params = _a[1];
        this.baseUrl = baseUrl;
        this.query = this.parseUrl(path, params ? querystring_1.parse(params) : {});
        this.tenantId = this.baseUrl.indexOf('/tenant-') === 0 ? this.baseUrl.split('/')[1] : 'tenant-default';
    }
    ODataRequest.prototype.setResponseHeader = function (headerName, headerValue) {
        this.headers[headerName] = headerValue;
    };
    ODataRequest.prototype.applyResponseHeaders = function (res) {
        for (var headerName in this.headers) {
            res.setHeader(headerName, this.headers[headerName]);
        }
        this.headers = {};
    };
    ODataRequest.prototype.parsePath = function (path) {
        var pathSplit = path.split('/');
        return pathSplit.reduce(function (pathArr, pathPart) {
            var keysStart = pathPart.indexOf('(');
            var keysEnd = pathPart.indexOf(')');
            var entity;
            var keys;
            if (keysStart > -1) {
                entity = pathPart.substring(0, keysStart) + pathPart.substring(keysEnd + 1);
                var keysList = pathPart.substring(keysStart + 1, keysEnd).split(',');
                keys = {};
                keysList.forEach(function (keyValue) {
                    var _a = keyValue.split('='), key = _a[0], value = _a[1];
                    if (value) {
                        keys[key] = value.replace(/^'|'$/g, '');
                    }
                    else {
                        keys[key] = undefined;
                    }
                });
            }
            else {
                entity = pathPart;
            }
            pathArr.push({ path: entity, keys: keys });
            return pathArr;
        }, []);
    };
    /**
     * Version specific parsing of the input url
     * @param path: url path
     * @param params: query parameters as object
     */
    ODataRequest.prototype.parseUrl = function (path, params) {
        var query = { properties: {} };
        query.queryPath = this.parsePath(path);
        query.rawParams = params;
        query.searchQuery = params['$search'];
        if (params['$select']) {
            var props = params['$select'].split(',');
            props.forEach(function (property) {
                query.properties[property.split('/')[0]] = true;
            });
        }
        else if (params['$expand']) {
            // If we have no select but an expand we may want to pull in content from the entity as well
            var entitySet = this.metadata.getEntitySet(query.queryPath[0].path);
            if (entitySet) {
                var properties = entitySet.entityType.entityProperties;
                properties.forEach(function (property) {
                    query.properties[property.name] = true;
                });
            }
        }
        if (params['$expand']) {
            var expandParameters = this.parseExpand(params['$expand']);
            query.expand = expandParameters.expand;
            query.properties = Object.assign(query.properties, expandParameters.properties || {});
        }
        if (params['$apply']) {
            var applyParameters = this.parseApply(params['$apply']);
            query.aggregateDefinition = applyParameters;
        }
        if (params['$filter']) {
            var filterParams = decodeURIComponent(params['$filter']);
            var thisFilters = this.parseFilter(filterParams);
            query.filter = thisFilters;
        }
        query.startIndex = params['$skip'] ? parseInt(params['$skip']) : 0;
        query.maxElements = params['$top'] ? parseInt(params['$top']) : Number.POSITIVE_INFINITY;
        query.format = 'json';
        return query;
    };
    ODataRequest.prototype.parseFilter = function (filterParams) {
        var filterSplit = filterParams.split(' ');
        filterSplit = filterSplit.reduce(function (outSplit, currentValue) {
            if (currentValue.indexOf('tolower') === 0) {
                outSplit.push(currentValue);
            }
            else if (currentValue.indexOf('(') !== -1) {
                var parentSplit = currentValue.split('(');
                parentSplit.forEach(function (subValue) {
                    if (subValue.length === 0) {
                        outSplit.push('(');
                    }
                    else {
                        outSplit.push(subValue);
                    }
                });
            }
            else if (currentValue.indexOf(')') !== -1) {
                var parentSplit = currentValue.split(')');
                parentSplit.forEach(function (subValue) {
                    if (subValue.length === 0) {
                        outSplit.push(')');
                    }
                    else {
                        outSplit.push(subValue);
                    }
                });
            }
            else {
                outSplit.push(currentValue);
            }
            return outSplit;
        }, []);
        var char = filterSplit[0];
        var filterIdx = 0;
        var filters = [];
        var childStack = [];
        var thisFilters = filters;
        filters.operator = 'AND';
        while (filterIdx < filterSplit.length) {
            if (char[0] === '(') {
                var childFilters = [];
                childStack.push(thisFilters);
                thisFilters = childFilters;
                filterIdx++;
                char = filterSplit[filterIdx];
            }
            else if (char[char.length - 1] === ')' && char.indexOf('tolower') !== 0) {
                var parentFilter = childStack.pop();
                parentFilter.push(thisFilters);
                thisFilters = parentFilter;
                filterIdx++;
                char = filterSplit[filterIdx];
            }
            else if (char === 'and') {
                filterIdx++;
                thisFilters.operator = 'AND';
                char = filterSplit[filterIdx];
            }
            else if (char === 'or') {
                var currentFilters = thisFilters;
                thisFilters = [currentFilters];
                thisFilters.operator = 'OR';
                filterIdx++;
                char = filterSplit[filterIdx];
            }
            else {
                var filterProperty = char;
                var filterOperator = filterSplit[++filterIdx];
                var eqValue = filterSplit[++filterIdx];
                thisFilters.push({
                    prop: filterProperty,
                    operator: filterOperator,
                    eqValue: eqValue
                });
                char = filterSplit[++filterIdx];
            }
        }
        return thisFilters;
    };
    ODataRequest.prototype.parseApply = function (applyParameters) {
        var filterRegEx = /^filter\(([^)]+)\)\/(.*)$/;
        var filterMatches = applyParameters.match(filterRegEx);
        var groupByText = applyParameters;
        var filterParams;
        if (filterMatches) {
            var filterExpr = filterMatches[1];
            filterParams = this.parseFilter(filterExpr);
            groupByText = filterMatches[2];
        }
        var groupByRegEx = /^groupby\(\(([^)]+)\),([^)]+\))\)$/;
        var groupByMatches = groupByText.match(groupByRegEx);
        if (groupByMatches) {
            return {
                filter: filterParams,
                groupBy: groupByMatches[1].split(','),
                aggregates: this.parseAggregateDefinition(groupByMatches[2])
            };
        }
    };
    ODataRequest.prototype.parseAggregateDefinition = function (aggregationDefinition) {
        var aggregateRegEx = /^aggregate\(([^)]+)\)$/;
        var aggregateMatches = aggregationDefinition.match(aggregateRegEx);
        if (aggregateMatches) {
            return aggregateMatches[1].split(',').map(function (aggregateMatch) {
                var _a = aggregateMatch.split(' '), property = _a[0], withOp = _a[1], operator = _a[2], asStr = _a[3], targetName = _a[4];
                return {
                    name: targetName || property,
                    operator: operator,
                    sourceProperty: property
                };
            });
        }
    };
    ODataRequest.prototype.enrichElement = function (entity, element) {
        // method can be overwritten by enhancing classes
    };
    // /**
    //  * Select only the properties that the client requested
    //  * @param element element to be modified
    //  */
    // protected selectProperties(element: object, properties: object): void {
    //     if (properties) {
    //         for (const property in element) {
    //             if (!properties[property]) {
    //                 delete element[property];
    //             }
    //         }
    //     }
    // }
    //
    // protected expandProperties(element: object, expand: object): void {
    //     if (expand) {
    //         for (const property in expand) {
    //             const target = this.metadata.getTarget(this.query.entitySet, property);
    //             if (target) {
    //                 const data = this.dataAccess.read(target);
    //
    //                 let keys;
    //                 const keyMap = this.metadata.getTargetPropertyMap(this.query.entitySet, property);
    //                 if (keyMap) {
    //                     keys = {};
    //                     for (const key in keyMap) {
    //                         if (element[key] !== undefined) {
    //                             keys[keyMap[key]] = element[key];
    //                         }
    //                     }
    //                 } else {
    //                     if (this.query.keys) {
    //                         keys = this.query.keys;
    //                     } else {
    //                         keys = {};
    //                         const keyIds = this.metadata.getKeys(this.query.entitySet);
    //                         keyIds.forEach((key) => {
    //                             keys[key] = element[key];
    //                         });
    //                     }
    //                 }
    //
    //                 const subElements = this.selectElements(data, keys);
    //                 for (const subElement of subElements) {
    //                     this.enrichElement(target, subElement);
    //                 }
    //                 element[property] = subElements.length === 1 ? subElements[0] : subElements;
    //             } else {
    //                 element[property] = null;
    //             }
    //         }
    //     }
    // }
    // protected selectElements(elements: object[], keys: object): object[] {
    //     if (!keys) {
    //         return elements;
    //     }
    //     const selected = elements.filter((element: object) => {
    //         for (const key in keys) {
    //             if (!!element[key] && element[key] + '' !== keys[key] + '') {
    //                 return false;
    //             }
    //         }
    //         return true;
    //     });
    //     return selected;
    // }
    ODataRequest.prototype.createErrorResponse = function (errorInformation) {
        var response = new simpleHttpResponse_1.SimpleResponse();
        if (errorInformation.isCustomError) {
            if (errorInformation.messageData) {
                if (errorInformation.isSAPMessage) {
                    response.setHeader('odata-version', '4.0');
                    response.setHeader('content-type', 'application/json;odata.metadata=minimal;IEEE754Compatible=true');
                    response.setHeader('sap-messages', JSON.stringify(errorInformation.messageData));
                }
                else {
                    response.write(JSON.stringify(errorInformation.messageData));
                }
            }
            else {
                response.write(errorInformation.messageData);
            }
            response.status(errorInformation.statusCode);
        }
        else {
            response.write(errorInformation.message);
            response.status(500);
        }
        return response;
    };
    ODataRequest.prototype.createResponse = function (data, bCreated, key) {
        if (bCreated === void 0) { bCreated = false; }
        if (key === void 0) { key = undefined; }
        var response = new simpleHttpResponse_1.SimpleResponse();
        if (data !== null) {
            response.write(this.toJSON(data));
            response.status(200);
        }
        else {
            response.status(204);
        }
        return response;
    };
    return ODataRequest;
}());
exports.ODataRequest = ODataRequest;
//# sourceMappingURL=data:application/json;base64,