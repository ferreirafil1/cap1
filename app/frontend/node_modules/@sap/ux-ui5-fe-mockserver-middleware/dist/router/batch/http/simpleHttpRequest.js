"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFromAppHttp = exports.createRequest = void 0;
var body_parser_1 = require("body-parser");
var clone = function (obj) {
    return JSON.parse(JSON.stringify(obj));
};
var createUrlData = function (request) {
    var protocol = request.connection && request.connection.encrypted ? 'https' : 'http';
    return {
        host: request.headers['x-forwarded-host'] || request.headers.host,
        proto: request.headers['x-forwarded-proto'] || request.protocol || protocol,
        path: request.headers['x-forwarded-path'] || request.url,
        forwarded: !!request.headers['x-forwarded-path'],
        baseUrl: request.baseUrl
    };
};
function createRequest(originalRequest, uriPrefix) {
    var request = {
        headers: {}
    };
    if (originalRequest) {
        request = {
            httpVersion: originalRequest.httpVersion,
            headers: clone(originalRequest.headers),
            method: originalRequest.method,
            url: originalRequest.url,
            urlData: createUrlData(originalRequest),
            baseUrl: uriPrefix || originalRequest.baseUrl || ''
        };
    }
    if (originalRequest.body) {
        request.body = originalRequest.body;
    }
    request.getBodyAsString = function (cb) {
        if (request.body) {
            if (request.body instanceof Buffer) {
                return cb(request.body.toString('utf8'));
            }
            else {
                return cb(request.body);
            }
        }
        else if (originalRequest.body) {
            return cb(originalRequest.body);
        }
        else {
            var parser = body_parser_1.raw({ type: '*/*' });
            parser(originalRequest, null, function next(err) {
                if (err) {
                    throw new Error('Error while parsing http content');
                }
                var body = originalRequest.body;
                return cb(body.toString('utf8'));
            });
        }
    };
    return request;
}
exports.createRequest = createRequest;
function createRequestFromAppHttp(appHttp, options) {
    var appData = appHttp.rawData;
    var s = appData.url.split(' ');
    if (s.length !== 3) {
        throw new Error('Invalid URI format inside batch request.');
    }
    var method = s[0];
    var uri = s[1];
    var version = s[2];
    var body = appData.payload.join('\r\n');
    if (uri.substr(0, 1) !== '/') {
        uri = '/' + uri;
    }
    var request = {
        httpVersion: version,
        headers: clone(appData.headers),
        method: method,
        url: uri,
        urlData: undefined,
        getBodyAsString: undefined,
        body: body
    };
    request.urlData = createUrlData(request);
    if (options) {
        Object.assign(request, options);
    }
    request.getBodyAsString = function (cb) {
        return cb(request.body);
    };
    return request;
}
exports.createRequestFromAppHttp = createRequestFromAppHttp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlSHR0cFJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcm91dGVyL2JhdGNoL2h0dHAvc2ltcGxlSHR0cFJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQWtDO0FBR2xDLElBQU0sS0FBSyxHQUFHLFVBQUMsR0FBVztJQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUVGLElBQU0sYUFBYSxHQUFHLFVBQUMsT0FBTztJQUMxQixJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUV2RixPQUFPO1FBQ0gsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDakUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLFFBQVE7UUFDM0UsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRztRQUN4RCxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDaEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0tBQzNCLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixTQUFnQixhQUFhLENBQUMsZUFBd0IsRUFBRSxTQUFpQjtJQUNyRSxJQUFJLE9BQU8sR0FBUTtRQUNmLE9BQU8sRUFBRSxFQUFFO0tBQ2QsQ0FBQztJQUVGLElBQUksZUFBZSxFQUFFO1FBQ2pCLE9BQU8sR0FBRztZ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TyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV6QyxJQUFJLE9BQU8sRUFBRTtRQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0lBRUQsT0FBTyxDQUFDLGVBQWUsR0FBRyxVQUFDLEVBQUU7UUFDekIsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQztJQUVGLE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUF0Q0QsNERBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmF3IH0gZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuXG5jb25zdCBjbG9uZSA9IChvYmo6IG9iamVjdCk6IG9iamVjdCA9PiB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59O1xuXG5jb25zdCBjcmVhdGVVcmxEYXRhID0gKHJlcXVlc3QpOiBvYmplY3QgPT4ge1xuICAgIGNvbnN0IHByb3RvY29sID0gcmVxdWVzdC5jb25uZWN0aW9uICYmIHJlcXVlc3QuY29ubmVjdGlvbi5lbmNyeXB0ZWQgPyAnaHR0cHMnIDogJ2h0dHAnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdDogcmVxdWVzdC5oZWFkZXJzWyd4LWZvcndhcmRlZC1ob3N0J10gfHwgcmVxdWVzdC5oZWFkZXJzLmhvc3QsXG4gICAgICAgIHByb3RvOiByZXF1ZXN0LmhlYWRlcnNbJ3gtZm9yd2FyZGVkLXByb3RvJ10gfHwgcmVxdWVzdC5wcm90b2NvbCB8fCBwcm90b2NvbCxcbiAgICAgICAgcGF0aDogcmVxdWVzdC5oZWFkZXJzWyd4LWZvcndhcmRlZC1wYXRoJ10gfHwgcmVxdWVzdC51cmwsXG4gICAgICAgIGZvcndhcmRlZDogISFyZXF1ZXN0LmhlYWRlcnNbJ3gtZm9yd2FyZGVkLXBhdGgnXSxcbiAgICAgICAgYmFzZVVybDogcmVxdWVzdC5iYXNlVXJsXG4gICAgfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0KG9yaWdpbmFsUmVxdWVzdDogUmVxdWVzdCwgdXJpUHJlZml4OiBzdHJpbmcpOiBhbnkge1xuICAgIGxldCByZXF1ZXN0OiBhbnkgPSB7XG4gICAgICAgIGhlYWRlcnM6IHt9XG4gICAgfTtcblxuICAgIGlmIChvcmlnaW5hbFJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgIGh0dHBWZXJzaW9uOiBvcmlnaW5hbFJlcXVlc3QuaHR0cFZlcnNpb24sXG4gICAgICAgICAgICBoZWFkZXJzOiBjbG9uZShvcmlnaW5hbFJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgICAgICBtZXRob2Q6IG9yaWdpbmFsUmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICB1cmw6IG9yaWdpbmFsUmVxdWVzdC51cmwsXG4gICAgICAgICAgICB1cmxEYXRhOiBjcmVhdGVVcmxEYXRhKG9yaWdpbmFsUmVxdWVzdCksXG4gICAgICAgICAgICBiYXNlVXJsOiB1cmlQcmVmaXggfHwgb3JpZ2luYWxSZXF1ZXN0LmJhc2VVcmwgfHwgJydcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3JpZ2luYWxSZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgcmVxdWVzdC5ib2R5ID0gb3JpZ2luYWxSZXF1ZXN0LmJvZHk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5nZXRCb2R5QXNTdHJpbmcgPSAoY2IpID0+IHtcbiAgICAgICAgaWYgKHJlcXVlc3QuYm9keSkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYm9keSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihyZXF1ZXN0LmJvZHkudG9TdHJpbmcoJ3V0ZjgnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYihyZXF1ZXN0LmJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsUmVxdWVzdC5ib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4gY2Iob3JpZ2luYWxSZXF1ZXN0LmJvZHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gcmF3KHsgdHlwZTogJyovKicgfSk7XG5cbiAgICAgICAgICAgIHBhcnNlcihvcmlnaW5hbFJlcXVlc3QsIG51bGwsIGZ1bmN0aW9uIG5leHQoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIHBhcnNpbmcgaHR0cCBjb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBvcmlnaW5hbFJlcXVlc3QuYm9keTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2IoYm9keS50b1N0cmluZygndXRmOCcpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiByZXF1ZXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdEZyb21BcHBIdHRwKGFwcEh0dHAsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhcHBEYXRhID0gYXBwSHR0cC5yYXdEYXRhO1xuXG4gICAgY29uc3QgcyA9IGFwcERhdGEudXJsLnNwbGl0KCcgJyk7XG4gICAgaWYgKHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVUkkgZm9ybWF0IGluc2lkZSBiYXRjaCByZXF1ZXN0LicpO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBzWzBdO1xuICAgIGxldCB1cmkgPSBzWzFdO1xuICAgIGNvbnN0IHZlcnNpb24gPSBzWzJdO1xuXG4gICAgY29uc3QgYm9keSA9IGFwcERhdGEucGF5bG9hZC5qb2luKCdcXHJcXG4nKTtcblxuICAgIGlmICh1cmkuc3Vic3RyKDAsIDEpICE9PSAnLycpIHtcbiAgICAgICAgdXJpID0gJy8nICsgdXJpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgIGh0dHBWZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICBoZWFkZXJzOiBjbG9uZShhcHBEYXRhLmhlYWRlcnMpLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgdXJsOiB1cmksXG4gICAgICAgIHVybERhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0Qm9keUFzU3RyaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuXG4gICAgcmVxdWVzdC51cmxEYXRhID0gY3JlYXRlVXJsRGF0YShyZXF1ZXN0KTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5nZXRCb2R5QXNTdHJpbmcgPSAoY2IpID0+IHtcbiAgICAgICAgcmV0dXJuIGNiKHJlcXVlc3QuYm9keSk7XG4gICAgfTtcblxuICAgIHJldHVybiByZXF1ZXN0O1xufVxuIl19