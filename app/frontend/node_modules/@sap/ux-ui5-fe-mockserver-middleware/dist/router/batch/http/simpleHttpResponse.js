"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResponse = exports.SimpleResponse = void 0;
var http = __importStar(require("http"));
var SimpleResponse = /** @class */ (function () {
    function SimpleResponse() {
        this.statusCode = null;
        this.headers = {};
        this.data = '';
    }
    SimpleResponse.prototype.writeHead = function (code, headers) {
        this.statusCode = code;
        Object.assign(this.headers, headers);
    };
    SimpleResponse.prototype.setHeader = function (name, value) {
        this.headers[name] = value;
    };
    SimpleResponse.prototype.status = function (code) {
        this.statusCode = code;
        return this;
    };
    SimpleResponse.prototype.write = function (data) {
        this.data += data;
        return this;
    };
    SimpleResponse.prototype.end = function () {
        // nothing to do
    };
    SimpleResponse.prototype.writeToBatchResponse = function (response, contentId) {
        var value;
        var headers = this.headers;
        response.write('HTTP/1.1 ' + this.statusCode + ' ' + http.STATUS_CODES['' + this.statusCode] + '\r\n');
        Object.keys(headers).forEach(function (key) {
            value = headers[key];
            response.write(key + ': ' + value + '\r\n');
        });
        response.write('\r\n'); // end of header
        response.write(this.data);
        if (this.data.length > 0) {
            response.write('\r\n'); //as used in OData_Specification_V2.0 batch samples
        }
    };
    SimpleResponse.prototype.writeToResponse = function (res) {
        var _this = this;
        res.status(this.statusCode);
        Object.keys(this.headers).forEach(function (headerName) {
            res.header(headerName, _this.headers[headerName]);
        });
        if (this.data.length > 0) {
            res.send(JSON.parse(this.data));
        }
        else {
            res.send(this.data);
        }
    };
    return SimpleResponse;
}());
exports.SimpleResponse = SimpleResponse;
function createResponse() {
    return new SimpleResponse();
}
exports.createResponse = createResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlSHR0cFJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JvdXRlci9iYXRjaC9odHRwL3NpbXBsZUh0dHBSZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQTZCO0FBRTdCO0lBQUE7UUFDSSxlQUFVLEdBQVcsSUFBSSxDQUFDO1FBQzFCLFlBQU8sR0FBVyxFQUFFLENBQUM7UUFDckIsU0FBSSxHQUFHLEVBQUUsQ0FBQztJQXFEZCxDQUFDO0lBbkRVLGtDQUFTLEdBQWhCLFVBQWlCLElBQUksRUFBRSxPQUFPO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sa0NBQVMsR0FBaEIsVUFBaUIsSUFBSSxFQUFFLEtBQUs7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUVNLCtCQUFNLEdBQWIsVUFBYyxJQUFJO1FBQ2QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLDhCQUFLLEdBQVosVUFBYSxJQUFJO1FBQ2IsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLDRCQUFHLEdBQVY7UUFDSSxnQkFBZ0I7SUFDcEIsQ0FBQztJQUVNLDZDQUFvQixHQUEzQixVQUE0QixRQUFRLEVBQUUsU0FBUztRQUMzQyxJQUFJLEtBQUssQ0FBQztRQUNWLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRXZHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsR0FBRztZQUNyQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCO1FBQ3hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxtREFBbUQ7U0FDOUU7SUFDTCxDQUFDO0lBRU0sd0NBQWUsR0FBdEIsVUFBdUIsR0FBRztRQUExQixpQkFVQztRQVRHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVU7WUFDekMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFDTCxxQkFBQztBQUFELENBQUMsQUF4REQsSUF3REM7QUF4RFksd0NBQWM7QUEwRDNCLFNBQWdCLGNBQWM7SUFDMUIsT0FBTyxJQUFJLGNBQWMsRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUFGRCx3Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVSZXNwb25zZSB7XG4gICAgc3RhdHVzQ29kZTogbnVtYmVyID0gbnVsbDtcbiAgICBoZWFkZXJzOiBvYmplY3QgPSB7fTtcbiAgICBkYXRhID0gJyc7XG5cbiAgICBwdWJsaWMgd3JpdGVIZWFkKGNvZGUsIGhlYWRlcnMpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gY29kZTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmhlYWRlcnMsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRIZWFkZXIobmFtZSwgdmFsdWUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXR1cyhjb2RlKTogU2ltcGxlUmVzcG9uc2Uge1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBjb2RlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgd3JpdGUoZGF0YSk6IFNpbXBsZVJlc3BvbnNlIHtcbiAgICAgICAgdGhpcy5kYXRhICs9IGRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmQoKTogdm9pZCB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICB9XG5cbiAgICBwdWJsaWMgd3JpdGVUb0JhdGNoUmVzcG9uc2UocmVzcG9uc2UsIGNvbnRlbnRJZCk6IHZvaWQge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmhlYWRlcnM7XG4gICAgICAgIHJlc3BvbnNlLndyaXRlKCdIVFRQLzEuMSAnICsgdGhpcy5zdGF0dXNDb2RlICsgJyAnICsgaHR0cC5TVEFUVVNfQ09ERVNbJycgKyB0aGlzLnN0YXR1c0NvZGVdICsgJ1xcclxcbicpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGhlYWRlcnNba2V5XTtcbiAgICAgICAgICAgIHJlc3BvbnNlLndyaXRlKGtleSArICc6ICcgKyB2YWx1ZSArICdcXHJcXG4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzcG9uc2Uud3JpdGUoJ1xcclxcbicpOyAvLyBlbmQgb2YgaGVhZGVyXG4gICAgICAgIHJlc3BvbnNlLndyaXRlKHRoaXMuZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVzcG9uc2Uud3JpdGUoJ1xcclxcbicpOyAvL2FzIHVzZWQgaW4gT0RhdGFfU3BlY2lmaWNhdGlvbl9WMi4wIGJhdGNoIHNhbXBsZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB3cml0ZVRvUmVzcG9uc2UocmVzKTogdm9pZCB7XG4gICAgICAgIHJlcy5zdGF0dXModGhpcy5zdGF0dXNDb2RlKTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5oZWFkZXJzKS5mb3JFYWNoKChoZWFkZXJOYW1lKSA9PiB7XG4gICAgICAgICAgICByZXMuaGVhZGVyKGhlYWRlck5hbWUsIHRoaXMuaGVhZGVyc1toZWFkZXJOYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlcy5zZW5kKEpTT04ucGFyc2UodGhpcy5kYXRhKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMuc2VuZCh0aGlzLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVzcG9uc2UoKTogU2ltcGxlUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgU2ltcGxlUmVzcG9uc2UoKTtcbn1cbiJdfQ==