"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchContent = void 0;
function split(input) {
    var LF = '\n';
    var CRLF = '\r\n';
    var a = [];
    var pL = 0;
    var p1 = input.indexOf(CRLF, pL);
    var p2 = input.indexOf(LF, pL);
    while (p1 !== -1 || p2 !== -1) {
        if (p1 !== -1 && p1 <= p2) {
            a.push(input.substring(pL, p1));
            pL = p1 + 2;
        }
        else {
            a.push(input.substring(pL, p2));
            pL = p2 + 1;
        }
        p1 = input.indexOf(CRLF, pL);
        p2 = input.indexOf(LF, pL);
    }
    if (pL < input.length) {
        a.push(input.substring(pL));
    }
    return a;
}
var BatchContent = /** @class */ (function () {
    function BatchContent(data) {
        if (typeof data === 'string') {
            this.type = 0;
            this.stringData = data;
            this.stringSplit = split(data);
            this.pos = 0;
        }
        else {
            throw new Error('Only string allowed for batch parser');
        }
    }
    BatchContent.prototype.lookLine = function () {
        return this.stringSplit[this.pos];
    };
    BatchContent.prototype.readLine = function () {
        return this.stringSplit[this.pos++];
    };
    BatchContent.prototype.inc = function () {
        this.pos++;
    };
    return BatchContent;
}());
exports.BatchContent = BatchContent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hDb250ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JvdXRlci9iYXRjaC9jb250ZW50L2JhdGNoQ29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFTLEtBQUssQ0FBQyxLQUFLO0lBQ2hCLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQztJQUNoQixJQUFNLElBQUksR0FBRyxNQUFNLENBQUM7SUFDcEIsSUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRWIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFL0IsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQzNCLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDdkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7YUFBTTtZQUNILENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNmO1FBQ0QsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM5QjtJQUNELElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRDtJQU1JLHNCQUFtQixJQUFJO1FBQ25CLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDaEI7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFFTSwrQkFBUSxHQUFmO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sMEJBQUcsR0FBVjtRQUNJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUE1QkQsSUE0QkM7QUE1Qlksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzcGxpdChpbnB1dCkge1xuICAgIGNvbnN0IExGID0gJ1xcbic7XG4gICAgY29uc3QgQ1JMRiA9ICdcXHJcXG4nO1xuICAgIGNvbnN0IGEgPSBbXTtcblxuICAgIGxldCBwTCA9IDA7XG4gICAgbGV0IHAxID0gaW5wdXQuaW5kZXhPZihDUkxGLCBwTCk7XG4gICAgbGV0IHAyID0gaW5wdXQuaW5kZXhPZihMRiwgcEwpO1xuXG4gICAgd2hpbGUgKHAxICE9PSAtMSB8fCBwMiAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHAxICE9PSAtMSAmJiBwMSA8PSBwMikge1xuICAgICAgICAgICAgYS5wdXNoKGlucHV0LnN1YnN0cmluZyhwTCwgcDEpKTtcbiAgICAgICAgICAgIHBMID0gcDEgKyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYS5wdXNoKGlucHV0LnN1YnN0cmluZyhwTCwgcDIpKTtcbiAgICAgICAgICAgIHBMID0gcDIgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHAxID0gaW5wdXQuaW5kZXhPZihDUkxGLCBwTCk7XG4gICAgICAgIHAyID0gaW5wdXQuaW5kZXhPZihMRiwgcEwpO1xuICAgIH1cbiAgICBpZiAocEwgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoKGlucHV0LnN1YnN0cmluZyhwTCkpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cblxuZXhwb3J0IGNsYXNzIEJhdGNoQ29udGVudCB7XG4gICAgdHlwZTogbnVtYmVyO1xuICAgIHN0cmluZ0RhdGE6IHN0cmluZztcbiAgICBzdHJpbmdTcGxpdDogYW55O1xuICAgIHBvczogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gMDtcbiAgICAgICAgICAgIHRoaXMuc3RyaW5nRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLnN0cmluZ1NwbGl0ID0gc3BsaXQoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgc3RyaW5nIGFsbG93ZWQgZm9yIGJhdGNoIHBhcnNlcicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxvb2tMaW5lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZ1NwbGl0W3RoaXMucG9zXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZExpbmUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nU3BsaXRbdGhpcy5wb3MrK107XG4gICAgfVxuXG4gICAgcHVibGljIGluYygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wb3MrKztcbiAgICB9XG59XG4iXX0=