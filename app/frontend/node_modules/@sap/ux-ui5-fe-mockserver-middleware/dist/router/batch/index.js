"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchRequestHandler = void 0;
var keyGenerator_1 = require("./keyGenerator");
var simpleHttpRequest_1 = require("./http/simpleHttpRequest");
var batchParser_1 = require("./content/batchParser");
var odataV2Request_1 = require("../request/odataV2Request");
var odataV4Request_1 = require("../request/odataV4Request");
/**
 * Simplified/mocked implementation of a batch context required by the
 * xs2/xsodata lib
 */
var index = 0;
var mockContext = {
    getNextKeyCounter: function () {
        return index++;
    }
};
/**
 * Write batch content to the response. The method has been copied from the
 * xs2/xsodata project and modified because FE expects status code 202.
 * @param batch
 * @param context
 * @param response
 */
function writeBatch(batch, context, response) {
    response.statusCode = 200;
    var boundary = 'batch_' + keyGenerator_1.createBoundary(context);
    response.setHeader('Content-Type', 'multipart/mixed; boundary=' + boundary);
    response.write('--' + boundary + '\r\n');
    for (var i = 0; i < batch.parts.length; i++) {
        if (i !== 0) {
            response.write('\r\n--' + boundary + '\r\n');
        }
        batch.parts[i].write(context, response);
    }
    response.write('\r\n--' + boundary + '--\r\n');
}
function batchRequestHandler(metadata, dataAccess, config) {
    var _this = this;
    return function (req, res) {
        var request = simpleHttpRequest_1.createRequest(req, '/');
        if (metadata.getVersion() === '2.0') {
            res.setHeader('dataserviceversion', metadata.getVersion());
        }
        else {
            res.setHeader('odata-version', metadata.getVersion());
        }
        res.status(200);
        var boundary = batchParser_1.getBoundary(req.headers['content-type']);
        /**
         * Process the current part and prepare the return part
         * @param part
         */
        function handlePart(part) {
            return __awaiter(this, void 0, void 0, function () {
                var baseUrl, _a, method, url, odataReq, _b, patchData, updatedData, postData, actionResponse, createdData, data, e_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            baseUrl = req.baseUrl.replace('/$batch', '');
                            if (config.debug) {
                                console.log(part.rawData.url);
                            }
                            _a = part.rawData.url.split(' '), method = _a[0], url = _a[1];
                            odataReq = metadata.getVersion() === '2.0'
                                ? new odataV2Request_1.ODataV2Request(baseUrl, url, metadata)
                                : new odataV4Request_1.ODataV4Request(baseUrl, url, metadata);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 14, 15, 16]);
                            _b = method;
                            switch (_b) {
                                case 'PATCH': return [3 /*break*/, 2];
                                case 'MERGE': return [3 /*break*/, 2];
                                case 'DELETE': return [3 /*break*/, 4];
                                case 'POST': return [3 /*break*/, 6];
                                case 'GET': return [3 /*break*/, 11];
                            }
                            return [3 /*break*/, 11];
                        case 2:
                            patchData = part.rawData.payload[0].length ? JSON.parse(part.rawData.payload[0]) : {};
                            return [4 /*yield*/, dataAccess.updateData(odataReq, patchData)];
                        case 3:
                            updatedData = _c.sent();
                            part.response = odataReq.createResponse(updatedData);
                            return [3 /*break*/, 13];
                        case 4: return [4 /*yield*/, dataAccess.deleteData(odataReq)];
                        case 5:
                            _c.sent();
                            part.response = odataReq.createResponse(null);
                            return [3 /*break*/, 13];
                        case 6:
                            postData = part.rawData.payload[0].length ? JSON.parse(part.rawData.payload[0]) : {};
                            return [4 /*yield*/, dataAccess.performAction(odataReq, postData)];
                        case 7:
                            actionResponse = _c.sent();
                            if (!(actionResponse === null)) return [3 /*break*/, 9];
                            return [4 /*yield*/, dataAccess.createData(odataReq, postData)];
                        case 8:
                            createdData = _c.sent();
                            part.response = odataReq.createResponse(createdData, true, createdData);
                            return [3 /*break*/, 10];
                        case 9:
                            part.response = odataReq.createResponse(actionResponse);
                            _c.label = 10;
                        case 10: return [3 /*break*/, 13];
                        case 11: return [4 /*yield*/, dataAccess.getData(odataReq)];
                        case 12:
                            data = _c.sent();
                            part.response = odataReq.createResponse(data);
                            return [3 /*break*/, 13];
                        case 13: return [3 /*break*/, 16];
                        case 14:
                            e_1 = _c.sent();
                            part.response = odataReq.createErrorResponse(e_1);
                            return [3 /*break*/, 16];
                        case 15:
                            odataReq.applyResponseHeaders(res);
                            return [7 /*endfinally*/];
                        case 16: return [2 /*return*/];
                    }
                });
            });
        }
        request.getBodyAsString(function (body) { return __awaiter(_this, void 0, void 0, function () {
            var batch;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        batch = batchParser_1.convertBatch(body, boundary);
                        return [4 /*yield*/, Promise.all(batch.parts.map(function (part) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!part.isChangeSet) return [3 /*break*/, 2];
                                            return [4 /*yield*/, Promise.all(part.parts.map(function (subPart) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, handlePart(subPart)];
                                                        case 1: return [2 /*return*/, _a.sent()];
                                                    }
                                                }); }); }))];
                                        case 1: return [2 /*return*/, _a.sent()];
                                        case 2: return [4 /*yield*/, handlePart(part)];
                                        case 3: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        writeBatch(batch, mockContext, res);
                        res.end();
                        return [2 /*return*/];
                }
            });
        }); });
    };
}
exports.batchRequestHandler = batchRequestHandler;
//# sourceMappingURL=data:application/json;base64,