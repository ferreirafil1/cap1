"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = require("../../../../specification/common/page");
const table_1 = require("../controls/table");
const common_1 = require("../../../common");
const Manifest_1 = require("../../../../specification/common/webapp/manifest/Manifest");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const v2_1 = require("../../../../specification/v2");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
function convertSelector(selectorId) {
    return selectorId
        .replace(/:2f/g, '/')
        .replace(/:23/g, '#')
        .replace(/:40/g, '@');
}
exports.convertSelector = convertSelector;
function addFlex(config, changeString, jsonSchema, logger) {
    var _a, _b, _c, _d, _e, _f, _g;
    try {
        const change = common_1.parseChangeString(changeString);
        const changePropertyKey = change.content.property;
        if (((_a = change.controlId) === null || _a === void 0 ? void 0 : _a.includes(page_1.PageType.ListReport)) || ((_b = change.controlId) === null || _b === void 0 ? void 0 : _b.includes(page_1.PageType.AnalyticalListPage))) {
            change.controlId = convertSelector(change.controlId);
            if (change.controlType === common_1.ControlType.SmartFilterBar) {
                const schemaProperty = ((_d = (_c = jsonSchema['definitions']) === null || _c === void 0 ? void 0 : _c['FilterBar']) === null || _d === void 0 ? void 0 : _d.properties[changePropertyKey]) || ((_f = (_e = jsonSchema['definitions']) === null || _e === void 0 ? void 0 : _e['AnalyticalListPageFilterBar']) === null || _f === void 0 ? void 0 : _f.properties[changePropertyKey]);
                if (schemaProperty) {
                    config.filterBar[changePropertyKey] = change.content.newBinding
                        ? change.content.newBinding
                        : change.content.newValue;
                }
            }
            else if (change.controlType === common_1.ControlType.DynamicPage) {
                const schemaProperty = jsonSchema['properties'][changePropertyKey];
                if (schemaProperty) {
                    config[change.content.property] = change.content.newValue;
                }
            }
            else if (change.controlType === common_1.ControlType.SmartChart) {
                const schemaProperty = jsonSchema['definitions']['ChartSettings'].properties[changePropertyKey];
                if (schemaProperty) {
                    const syncRule = decorators_1.getReflectMetadata(config['chart'], changePropertyKey);
                    if ((_g = syncRule === null || syncRule === void 0 ? void 0 : syncRule.flex) === null || _g === void 0 ? void 0 : _g.importFlexValue) {
                        syncRule.flex.importFlexValue(change, config['chart'], changePropertyKey);
                    }
                    else {
                        config['chart'][changePropertyKey] = change.content.newBinding
                            ? change.content.newBinding
                            : change.content.newValue;
                    }
                }
            }
            else {
                const flexForTransfer = {
                    controlId: change.controlId,
                    propertyId: change.content.property,
                    newValue: change.content.newBinding ? change.content.newBinding : change.content.newValue,
                    controlType: change.controlType
                };
                let constructorName;
                if ((!config.table.type || config.table.type === v2_1.TableTypeV2.ResponsiveTable) &&
                    !flexForTransfer.controlId.includes(page_1.PAGETYPE_VIEW_EXTENSION_TEMPLATE_MAP.get(page_1.PageType.AnalyticalListPage))) {
                    constructorName = 'ResponsiveTableWithMultiSelect';
                }
                else {
                    constructorName = config.table.constructor.name;
                }
                const schemaProperty = jsonSchema['definitions'][`${constructorName}<LineItems>`].properties[flexForTransfer.propertyId];
                if (schemaProperty || flexForTransfer.controlType === common_1.ControlType.TableColumn) {
                    table_1.addFlexForTable(config.table, flexForTransfer, jsonSchema);
                }
            }
        }
    }
    catch (error) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('FLEXERROR')
        }, ...error);
    }
}
exports.addFlex = addFlex;
function transferSettingsOfObject(configPart, manifest, jsonSchema, pageKey, logger, kpiKey) {
    if (!jsonSchema) {
        return;
    }
    let deprecatedProperties = [];
    let manifestSection = {};
    if (configPart.getDeprecated) {
        deprecatedProperties = configPart.getDeprecated();
    }
    if (jsonSchema['properties']) {
        for (const propertyKey in jsonSchema['properties']) {
            const syncRule = decorators_1.getReflectMetadata(configPart, propertyKey);
            // Version check
            if (syncRule && syncRule.manifest) {
                const path = syncRule.manifest.path([pageKey], undefined, kpiKey);
                manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
                const manifestKey = syncRule.manifest.key || propertyKey;
                const importHandler = syncRule.manifest.import;
                if (importHandler && typeof importHandler === 'function') {
                    const value = importHandler(manifestSection[manifestKey]);
                    if (value !== undefined) {
                        configPart[propertyKey] = value;
                    }
                }
                else if (manifestSection[manifestKey] !== undefined) {
                    configPart[manifestKey] = manifestSection[propertyKey];
                }
                // Check for deprecated properties.
                if (manifestSection && deprecatedProperties) {
                    for (const key in manifestSection) {
                        const deprecated = deprecatedProperties[key];
                        if (deprecated) {
                            extensionLogger_1.log(logger, {
                                severity: "warning" /* Warning */,
                                message: decorators_1.getTextForDeprecated(key, deprecated),
                                location: {
                                    path: 'webapp/manifest.json/',
                                    range: path.split('/')
                                }
                            });
                            delete deprecatedProperties[key];
                        }
                    }
                }
            }
            // Adjustment of 'quickVariantSelectionX' - tableSettings
            if (propertyKey === 'quickVariantSelectionX' && configPart[propertyKey]) {
                for (const variant in configPart[propertyKey]['variants']) {
                    const currentQuickVariantX = configPart[propertyKey]['variants'][variant];
                    if (currentQuickVariantX['tableSettings']) {
                        for (const key in currentQuickVariantX['tableSettings']) {
                            currentQuickVariantX[key] = currentQuickVariantX['tableSettings'][key];
                        }
                        delete currentQuickVariantX['tableSettings'];
                    }
                }
            }
        }
    }
}
exports.transferSettingsOfObject = transferSettingsOfObject;
/**
 * Determines the table type for a given LR or ALP table, based on the component name and its table settings
 * This does not exactly reflect the run time behaviour of Fiori elements but a best guess and expectation.
 * @param manifest - manifest.json file content of the app
 * @param pageKey - key of the page in the manifest
 */
function determineTableType(manifest, pageKey) {
    var _a, _b;
    const page = manifest[Manifest_1.ManifestSection.generic].pages[pageKey];
    let tableType = v2_1.TableTypeV2.ResponsiveTable;
    if (manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings &&
        ((manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings.tableSettings &&
            manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings.tableSettings['type']) ||
            manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings['tableType'])) {
        tableType = ((_b = (_a = page.component.settings) === null || _a === void 0 ? void 0 : _a.tableSettings) === null || _b === void 0 ? void 0 : _b['type']) || page.component.settings['tableType'];
    }
    else if (page.component.name === 'sap.suite.ui.generic.template.AnalyticalListPage') {
        tableType = v2_1.TableTypeV2.AnalyticalTable;
    }
    return tableType;
}
exports.determineTableType = determineTableType;
//# sourceMappingURL=index.js.map